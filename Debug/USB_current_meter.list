
USB_current_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f50  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c1c  0800405c  0800405c  0000505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c78  08004c78  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c80  08004c80  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c80  08004c80  00005c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c84  08004c84  00005c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004c88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  2000005c  08004ce4  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08004ce4  0000666c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000900e  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfd  00000000  00000000  0000f093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00010d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000755  00000000  00000000  00011728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017617  00000000  00000000  00011e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc3f  00000000  00000000  00029494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000852dd  00000000  00000000  000360d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb3b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be4  00000000  00000000  000bb3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000bdfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004044 	.word	0x08004044

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004044 	.word	0x08004044

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <OLED_ClearBuffer>:
static uint8_t oled_buffer[1024];			// Display buffer
static I2C_HandleTypeDef* hi2c;				// Pointer I2C structure

/* private: */
void OLED_ClearBuffer(uint8_t value)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 8000622:	2300      	movs	r3, #0
 8000624:	81fb      	strh	r3, [r7, #14]
 8000626:	e006      	b.n	8000636 <OLED_ClearBuffer+0x1e>
	{
		oled_buffer[i] = value;
 8000628:	89fb      	ldrh	r3, [r7, #14]
 800062a:	4908      	ldr	r1, [pc, #32]	@ (800064c <OLED_ClearBuffer+0x34>)
 800062c:	79fa      	ldrb	r2, [r7, #7]
 800062e:	54ca      	strb	r2, [r1, r3]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 8000630:	89fb      	ldrh	r3, [r7, #14]
 8000632:	3301      	adds	r3, #1
 8000634:	81fb      	strh	r3, [r7, #14]
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800063c:	d3f4      	bcc.n	8000628 <OLED_ClearBuffer+0x10>
	}
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	2000007c 	.word	0x2000007c

08000650 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x00, command};
 800065a:	2300      	movs	r3, #0
 800065c:	733b      	strb	r3, [r7, #12]
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 8000662:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <OLED_SendCommand+0x30>)
 8000664:	6818      	ldr	r0, [r3, #0]
 8000666:	f107 020c 	add.w	r2, r7, #12
 800066a:	230a      	movs	r3, #10
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2302      	movs	r3, #2
 8000670:	2178      	movs	r1, #120	@ 0x78
 8000672:	f001 fe35 	bl	80022e0 <HAL_I2C_Master_Transmit>
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000047c 	.word	0x2000047c

08000684 <OLED_SendData>:

void OLED_SendData(uint8_t data)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af02      	add	r7, sp, #8
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x40, data};
 800068e:	2340      	movs	r3, #64	@ 0x40
 8000690:	733b      	strb	r3, [r7, #12]
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 8000696:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <OLED_SendData+0x30>)
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	f107 020c 	add.w	r2, r7, #12
 800069e:	230a      	movs	r3, #10
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2302      	movs	r3, #2
 80006a4:	2178      	movs	r1, #120	@ 0x78
 80006a6:	f001 fe1b 	bl	80022e0 <HAL_I2C_Master_Transmit>
}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000047c 	.word	0x2000047c

080006b8 <OLED_Init>:

/* public: */

uint8_t OLED_Init(I2C_HandleTypeDef* i2c_handleTypeDef)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handleTypeDef;
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <OLED_Init+0xcc>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
	
	if (HAL_I2C_IsDeviceReady(hi2c, OLED_ADDRESS, 10, 100) != HAL_OK)
 80006c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000784 <OLED_Init+0xcc>)
 80006c8:	6818      	ldr	r0, [r3, #0]
 80006ca:	2364      	movs	r3, #100	@ 0x64
 80006cc:	220a      	movs	r2, #10
 80006ce:	2178      	movs	r1, #120	@ 0x78
 80006d0:	f001 ff04 	bl	80024dc <HAL_I2C_IsDeviceReady>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <OLED_Init+0x26>
	{
		return 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	e04e      	b.n	800077c <OLED_Init+0xc4>
	}
	
	OLED_SendCommand(OLED_DISPLAY_OFF);
 80006de:	20ae      	movs	r0, #174	@ 0xae
 80006e0:	f7ff ffb6 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_CLOCK_DIV_RATIO);
 80006e4:	20d5      	movs	r0, #213	@ 0xd5
 80006e6:	f7ff ffb3 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(0x80);
 80006ea:	2080      	movs	r0, #128	@ 0x80
 80006ec:	f7ff ffb0 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_MULTIPLEX_RATIO);
 80006f0:	20a8      	movs	r0, #168	@ 0xa8
 80006f2:	f7ff ffad 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(0x3F);
 80006f6:	203f      	movs	r0, #63	@ 0x3f
 80006f8:	f7ff ffaa 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_OFFSET);
 80006fc:	20d3      	movs	r0, #211	@ 0xd3
 80006fe:	f7ff ffa7 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(0x0);
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff ffa4 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_START_LINE | 0x0);
 8000708:	2040      	movs	r0, #64	@ 0x40
 800070a:	f7ff ffa1 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_CHARGE_PUMP);
 800070e:	208d      	movs	r0, #141	@ 0x8d
 8000710:	f7ff ff9e 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(0x14);
 8000714:	2014      	movs	r0, #20
 8000716:	f7ff ff9b 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_MEMORY_ADDR_MODE);
 800071a:	2020      	movs	r0, #32
 800071c:	f7ff ff98 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(0x00);
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff ff95 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_SEGMENT_REMAP | 0x1);
 8000726:	20a1      	movs	r0, #161	@ 0xa1
 8000728:	f7ff ff92 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_COM_SCAN_DIR_DEC);
 800072c:	20c8      	movs	r0, #200	@ 0xc8
 800072e:	f7ff ff8f 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_COM_PINS);
 8000732:	20da      	movs	r0, #218	@ 0xda
 8000734:	f7ff ff8c 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(0x12);
 8000738:	2012      	movs	r0, #18
 800073a:	f7ff ff89 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_CONTRAST_CONTROL);
 800073e:	2081      	movs	r0, #129	@ 0x81
 8000740:	f7ff ff86 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(0xFF);
 8000744:	20ff      	movs	r0, #255	@ 0xff
 8000746:	f7ff ff83 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_PRECHARGE_PERIOD);
 800074a:	20d9      	movs	r0, #217	@ 0xd9
 800074c:	f7ff ff80 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(0xF1);
 8000750:	20f1      	movs	r0, #241	@ 0xf1
 8000752:	f7ff ff7d 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_VCOM_DESELECT);
 8000756:	20db      	movs	r0, #219	@ 0xdb
 8000758:	f7ff ff7a 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(0x40);
 800075c:	2040      	movs	r0, #64	@ 0x40
 800075e:	f7ff ff77 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ALL_ON_RESUME);
 8000762:	20a4      	movs	r0, #164	@ 0xa4
 8000764:	f7ff ff74 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_NORMAL_DISPLAY);
 8000768:	20a6      	movs	r0, #166	@ 0xa6
 800076a:	f7ff ff71 	bl	8000650 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ON);
 800076e:	20af      	movs	r0, #175	@ 0xaf
 8000770:	f7ff ff6e 	bl	8000650 <OLED_SendCommand>

	OLED_Clear(0);
 8000774:	2000      	movs	r0, #0
 8000776:	f000 f807 	bl	8000788 <OLED_Clear>
	
	return 1;
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000047c 	.word	0x2000047c

08000788 <OLED_Clear>:

void OLED_Clear(uint8_t mode)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	if (mode) OLED_ClearBuffer(0xFF);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d003      	beq.n	80007a0 <OLED_Clear+0x18>
 8000798:	20ff      	movs	r0, #255	@ 0xff
 800079a:	f7ff ff3d 	bl	8000618 <OLED_ClearBuffer>
	else      OLED_ClearBuffer(0x00);
}
 800079e:	e002      	b.n	80007a6 <OLED_Clear+0x1e>
	else      OLED_ClearBuffer(0x00);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ff39 	bl	8000618 <OLED_ClearBuffer>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <OLED_DrawPixelStatus>:
		}
	}
}

void OLED_DrawPixelStatus(uint8_t pos_x, uint8_t pos_y, uint8_t mode)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	460b      	mov	r3, r1
 80007bc:	71bb      	strb	r3, [r7, #6]
 80007be:	4613      	mov	r3, r2
 80007c0:	717b      	strb	r3, [r7, #5]
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db3d      	blt.n	8000846 <OLED_DrawPixelStatus+0x96>
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80007ce:	d83a      	bhi.n	8000846 <OLED_DrawPixelStatus+0x96>
	
	if (mode)	oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] |= (1 << (pos_y & 7));
 80007d0:	797b      	ldrb	r3, [r7, #5]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d01a      	beq.n	800080c <OLED_DrawPixelStatus+0x5c>
 80007d6:	79fa      	ldrb	r2, [r7, #7]
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	b2d8      	uxtb	r0, r3
 80007de:	4603      	mov	r3, r0
 80007e0:	01db      	lsls	r3, r3, #7
 80007e2:	4413      	add	r3, r2
 80007e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000850 <OLED_DrawPixelStatus+0xa0>)
 80007e6:	5cd3      	ldrb	r3, [r2, r3]
 80007e8:	b25a      	sxtb	r2, r3
 80007ea:	79bb      	ldrb	r3, [r7, #6]
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	2101      	movs	r1, #1
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b259      	sxtb	r1, r3
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	4603      	mov	r3, r0
 8000800:	01db      	lsls	r3, r3, #7
 8000802:	4413      	add	r3, r2
 8000804:	b2c9      	uxtb	r1, r1
 8000806:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <OLED_DrawPixelStatus+0xa0>)
 8000808:	54d1      	strb	r1, [r2, r3]
 800080a:	e01d      	b.n	8000848 <OLED_DrawPixelStatus+0x98>
	else		oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] &= ~(1 << (pos_y & 7));
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	08db      	lsrs	r3, r3, #3
 8000812:	b2d8      	uxtb	r0, r3
 8000814:	4603      	mov	r3, r0
 8000816:	01db      	lsls	r3, r3, #7
 8000818:	4413      	add	r3, r2
 800081a:	4a0d      	ldr	r2, [pc, #52]	@ (8000850 <OLED_DrawPixelStatus+0xa0>)
 800081c:	5cd3      	ldrb	r3, [r2, r3]
 800081e:	b25a      	sxtb	r2, r3
 8000820:	79bb      	ldrb	r3, [r7, #6]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	2101      	movs	r1, #1
 8000828:	fa01 f303 	lsl.w	r3, r1, r3
 800082c:	b25b      	sxtb	r3, r3
 800082e:	43db      	mvns	r3, r3
 8000830:	b25b      	sxtb	r3, r3
 8000832:	4013      	ands	r3, r2
 8000834:	b259      	sxtb	r1, r3
 8000836:	79fa      	ldrb	r2, [r7, #7]
 8000838:	4603      	mov	r3, r0
 800083a:	01db      	lsls	r3, r3, #7
 800083c:	4413      	add	r3, r2
 800083e:	b2c9      	uxtb	r1, r1
 8000840:	4a03      	ldr	r2, [pc, #12]	@ (8000850 <OLED_DrawPixelStatus+0xa0>)
 8000842:	54d1      	strb	r1, [r2, r3]
 8000844:	e000      	b.n	8000848 <OLED_DrawPixelStatus+0x98>
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 8000846:	bf00      	nop
}
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	2000007c 	.word	0x2000007c

08000854 <OLED_GetWidthStr>:
		}
	}
}

uint8_t OLED_GetWidthStr(const char* str)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	uint8_t stl = strlen(str);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fc75 	bl	800014c <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	737b      	strb	r3, [r7, #13]
	uint8_t len = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < stl; i++, *str++)
 800086a:	2300      	movs	r3, #0
 800086c:	73bb      	strb	r3, [r7, #14]
 800086e:	e01a      	b.n	80008a6 <OLED_GetWidthStr+0x52>
	{
		len += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <OLED_GetWidthStr+0x64>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <OLED_GetWidthStr+0x64>)
 8000876:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800087a:	4619      	mov	r1, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <OLED_GetWidthStr+0x64>)
 8000884:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000888:	1ac3      	subs	r3, r0, r3
 800088a:	fb01 f303 	mul.w	r3, r1, r3
 800088e:	3304      	adds	r3, #4
 8000890:	4413      	add	r3, r2
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	4413      	add	r3, r2
 8000898:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < stl; i++, *str++)
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	3301      	adds	r3, #1
 800089e:	73bb      	strb	r3, [r7, #14]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	7bba      	ldrb	r2, [r7, #14]
 80008a8:	7b7b      	ldrb	r3, [r7, #13]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d3e0      	bcc.n	8000870 <OLED_GetWidthStr+0x1c>
	}

	return len;
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000480 	.word	0x20000480

080008bc <OLED_DrawChar>:

	return OLED_GetWidthStr(buf);
}

void OLED_DrawChar(char c, uint8_t ix, uint8_t iy, uint8_t mode)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4604      	mov	r4, r0
 80008c4:	4608      	mov	r0, r1
 80008c6:	4611      	mov	r1, r2
 80008c8:	461a      	mov	r2, r3
 80008ca:	4623      	mov	r3, r4
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	4603      	mov	r3, r0
 80008d0:	71bb      	strb	r3, [r7, #6]
 80008d2:	460b      	mov	r3, r1
 80008d4:	717b      	strb	r3, [r7, #5]
 80008d6:	4613      	mov	r3, r2
 80008d8:	713b      	strb	r3, [r7, #4]
	const uint8_t* symbol = &fontbyte(Font.numchars * (c - Font.offset) + 4);
 80008da:	4b37      	ldr	r3, [pc, #220]	@ (80009b8 <OLED_DrawChar+0xfc>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b36      	ldr	r3, [pc, #216]	@ (80009b8 <OLED_DrawChar+0xfc>)
 80008e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80008e4:	4618      	mov	r0, r3
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4933      	ldr	r1, [pc, #204]	@ (80009b8 <OLED_DrawChar+0xfc>)
 80008ea:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80008ee:	1a5b      	subs	r3, r3, r1
 80008f0:	fb00 f303 	mul.w	r3, r0, r3
 80008f4:	3304      	adds	r3, #4
 80008f6:	4413      	add	r3, r2
 80008f8:	60bb      	str	r3, [r7, #8]

	for (uint8_t x = 0; x < symbol[0]; x++)
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	e050      	b.n	80009a2 <OLED_DrawChar+0xe6>
	{
		for (uint8_t y = 0; y < Font.height; y++)
 8000900:	2300      	movs	r3, #0
 8000902:	73bb      	strb	r3, [r7, #14]
 8000904:	e044      	b.n	8000990 <OLED_DrawChar+0xd4>
		{
			if (symbol[1 + y / 8 + x * (Font.numchars - 1) / Font.width] & (0x01 << (y % 8)))
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	08db      	lsrs	r3, r3, #3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	4929      	ldr	r1, [pc, #164]	@ (80009b8 <OLED_DrawChar+0xfc>)
 8000912:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8000916:	3901      	subs	r1, #1
 8000918:	fb01 f303 	mul.w	r3, r1, r3
 800091c:	4926      	ldr	r1, [pc, #152]	@ (80009b8 <OLED_DrawChar+0xfc>)
 800091e:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8000922:	fb93 f3f1 	sdiv	r3, r3, r1
 8000926:	4413      	add	r3, r2
 8000928:	461a      	mov	r2, r3
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	4413      	add	r3, r2
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	7bbb      	ldrb	r3, [r7, #14]
 8000934:	f003 0307 	and.w	r3, r3, #7
 8000938:	fa42 f303 	asr.w	r3, r2, r3
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	2b00      	cmp	r3, #0
 8000942:	d011      	beq.n	8000968 <OLED_DrawChar+0xac>
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 1 : 0);
 8000944:	79ba      	ldrb	r2, [r7, #6]
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	4413      	add	r3, r2
 800094a:	b2d8      	uxtb	r0, r3
 800094c:	797a      	ldrb	r2, [r7, #5]
 800094e:	7bbb      	ldrb	r3, [r7, #14]
 8000950:	4413      	add	r3, r2
 8000952:	b2d9      	uxtb	r1, r3
 8000954:	793b      	ldrb	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	bf14      	ite	ne
 800095a:	2301      	movne	r3, #1
 800095c:	2300      	moveq	r3, #0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	f7ff ff25 	bl	80007b0 <OLED_DrawPixelStatus>
 8000966:	e010      	b.n	800098a <OLED_DrawChar+0xce>
			else
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 0 : 1);
 8000968:	79ba      	ldrb	r2, [r7, #6]
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	4413      	add	r3, r2
 800096e:	b2d8      	uxtb	r0, r3
 8000970:	797a      	ldrb	r2, [r7, #5]
 8000972:	7bbb      	ldrb	r3, [r7, #14]
 8000974:	4413      	add	r3, r2
 8000976:	b2d9      	uxtb	r1, r3
 8000978:	793b      	ldrb	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	bf0c      	ite	eq
 800097e:	2301      	moveq	r3, #1
 8000980:	2300      	movne	r3, #0
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	f7ff ff13 	bl	80007b0 <OLED_DrawPixelStatus>
		for (uint8_t y = 0; y < Font.height; y++)
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	3301      	adds	r3, #1
 800098e:	73bb      	strb	r3, [r7, #14]
 8000990:	7bbb      	ldrb	r3, [r7, #14]
 8000992:	4a09      	ldr	r2, [pc, #36]	@ (80009b8 <OLED_DrawChar+0xfc>)
 8000994:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000998:	4293      	cmp	r3, r2
 800099a:	dbb4      	blt.n	8000906 <OLED_DrawChar+0x4a>
	for (uint8_t x = 0; x < symbol[0]; x++)
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	3301      	adds	r3, #1
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	7bfa      	ldrb	r2, [r7, #15]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d3a9      	bcc.n	8000900 <OLED_DrawChar+0x44>
		}
	}
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd90      	pop	{r4, r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000480 	.word	0x20000480

080009bc <OLED_DrawNum>:

void OLED_DrawNum(int16_t num, uint8_t x, uint8_t y, uint8_t mode)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4604      	mov	r4, r0
 80009c4:	4608      	mov	r0, r1
 80009c6:	4611      	mov	r1, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	4623      	mov	r3, r4
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	4603      	mov	r3, r0
 80009d0:	717b      	strb	r3, [r7, #5]
 80009d2:	460b      	mov	r3, r1
 80009d4:	713b      	strb	r3, [r7, #4]
 80009d6:	4613      	mov	r3, r2
 80009d8:	70fb      	strb	r3, [r7, #3]
	char buf[15];
	sprintf(buf, "%d", num);
 80009da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	4907      	ldr	r1, [pc, #28]	@ (8000a00 <OLED_DrawNum+0x44>)
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fe7d 	bl	80036e4 <siprintf>

	OLED_DrawStr(buf, x, y, mode);
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	793a      	ldrb	r2, [r7, #4]
 80009ee:	7979      	ldrb	r1, [r7, #5]
 80009f0:	f107 0008 	add.w	r0, r7, #8
 80009f4:	f000 f806 	bl	8000a04 <OLED_DrawStr>
}
 80009f8:	bf00      	nop
 80009fa:	371c      	adds	r7, #28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	0800405c 	.word	0x0800405c

08000a04 <OLED_DrawStr>:

void OLED_DrawStr(const char *str, uint8_t x, uint8_t y, uint8_t mode)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	4611      	mov	r1, r2
 8000a10:	461a      	mov	r2, r3
 8000a12:	4603      	mov	r3, r0
 8000a14:	70fb      	strb	r3, [r7, #3]
 8000a16:	460b      	mov	r3, r1
 8000a18:	70bb      	strb	r3, [r7, #2]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	707b      	strb	r3, [r7, #1]
	uint8_t stl = strlen(str);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fb94 	bl	800014c <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	737b      	strb	r3, [r7, #13]
	uint8_t pos = x;
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	73fb      	strb	r3, [r7, #15]

	if (pos == RIGHT) pos = OLED_WIDTH - OLED_GetWidthStr(str) - 1;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a30:	d106      	bne.n	8000a40 <OLED_DrawStr+0x3c>
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ff0e 	bl	8000854 <OLED_GetWidthStr>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000a3e:	73fb      	strb	r3, [r7, #15]
	if (pos == CENTER) pos = (OLED_WIDTH - OLED_GetWidthStr(str) - 1) / 2;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	2bff      	cmp	r3, #255	@ 0xff
 8000a44:	d109      	bne.n	8000a5a <OLED_DrawStr+0x56>
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ff04 	bl	8000854 <OLED_GetWidthStr>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000a52:	0fda      	lsrs	r2, r3, #31
 8000a54:	4413      	add	r3, r2
 8000a56:	105b      	asrs	r3, r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
	if (y == CENTER) y = (OLED_HEIGHT - Font.height) / 2;
 8000a5a:	78bb      	ldrb	r3, [r7, #2]
 8000a5c:	2bff      	cmp	r3, #255	@ 0xff
 8000a5e:	d108      	bne.n	8000a72 <OLED_DrawStr+0x6e>
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <OLED_DrawStr+0xcc>)
 8000a62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000a66:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000a6a:	0fda      	lsrs	r2, r3, #31
 8000a6c:	4413      	add	r3, r2
 8000a6e:	105b      	asrs	r3, r3, #1
 8000a70:	70bb      	strb	r3, [r7, #2]

	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	73bb      	strb	r3, [r7, #14]
 8000a76:	e021      	b.n	8000abc <OLED_DrawStr+0xb8>
	{
		OLED_DrawChar(*str, pos, y, mode);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7818      	ldrb	r0, [r3, #0]
 8000a7c:	787b      	ldrb	r3, [r7, #1]
 8000a7e:	78ba      	ldrb	r2, [r7, #2]
 8000a80:	7bf9      	ldrb	r1, [r7, #15]
 8000a82:	f7ff ff1b 	bl	80008bc <OLED_DrawChar>
		pos += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 8000a86:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <OLED_DrawStr+0xcc>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <OLED_DrawStr+0xcc>)
 8000a8c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000a90:	4619      	mov	r1, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <OLED_DrawStr+0xcc>)
 8000a9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000a9e:	1ac3      	subs	r3, r0, r3
 8000aa0:	fb01 f303 	mul.w	r3, r1, r3
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	4413      	add	r3, r2
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	4413      	add	r3, r2
 8000aae:	73fb      	strb	r3, [r7, #15]
	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 8000ab0:	7bbb      	ldrb	r3, [r7, #14]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	73bb      	strb	r3, [r7, #14]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	7bba      	ldrb	r2, [r7, #14]
 8000abe:	7b7b      	ldrb	r3, [r7, #13]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d3d9      	bcc.n	8000a78 <OLED_DrawStr+0x74>
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000480 	.word	0x20000480

08000ad4 <OLED_UpdateScreen>:
/**********************************************************************************/
/*                           U P D A T E   S C R E E N                            */
/**********************************************************************************/

void OLED_UpdateScreen()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	e032      	b.n	8000b46 <OLED_UpdateScreen+0x72>
	{
		OLED_SendCommand(0x00 | (oled_start_column & 0x0F));	// lo tetrad starting column address
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <OLED_UpdateScreen+0x84>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	f003 030f 	and.w	r3, r3, #15
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fdb0 	bl	8000650 <OLED_SendCommand>
		OLED_SendCommand(0x10 | (oled_start_column >> 4));		// hi tetrad starting column address
 8000af0:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <OLED_UpdateScreen+0x84>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	091b      	lsrs	r3, r3, #4
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	f043 0310 	orr.w	r3, r3, #16
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fda6 	bl	8000650 <OLED_SendCommand>

		OLED_SendCommand(0xB0 | page_number);					// starting address of the page
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fd9f 	bl	8000650 <OLED_SendCommand>

		for (int16_t j = 0; j < OLED_WIDTH; j++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	80bb      	strh	r3, [r7, #4]
 8000b16:	e00f      	b.n	8000b38 <OLED_UpdateScreen+0x64>
		{
			OLED_SendData(oled_buffer[page_number * OLED_WIDTH + j]);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	01da      	lsls	r2, r3, #7
 8000b1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <OLED_UpdateScreen+0x88>)
 8000b24:	5cd3      	ldrb	r3, [r2, r3]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fdac 	bl	8000684 <OLED_SendData>
		for (int16_t j = 0; j < OLED_WIDTH; j++)
 8000b2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	3301      	adds	r3, #1
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	80bb      	strh	r3, [r7, #4]
 8000b38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b3e:	ddeb      	ble.n	8000b18 <OLED_UpdateScreen+0x44>
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	3301      	adds	r3, #1
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b07      	cmp	r3, #7
 8000b4a:	d9c9      	bls.n	8000ae0 <OLED_UpdateScreen+0xc>
		}
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000078 	.word	0x20000078
 8000b5c:	2000007c 	.word	0x2000007c

08000b60 <FontSet>:
#include "OLED_Fonts.h"

font_t Font;

void FontSet(const uint8_t* new_font)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	 Font.font = new_font;
 8000b68:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <FontSet+0x54>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
	 Font.width = (int16_t)fontbyte(0);
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <FontSet+0x54>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <FontSet+0x54>)
 8000b78:	809a      	strh	r2, [r3, #4]
	 Font.height = (int16_t)fontbyte(1);
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <FontSet+0x54>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <FontSet+0x54>)
 8000b86:	80da      	strh	r2, [r3, #6]
	 Font.offset = (int16_t)fontbyte(2);
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <FontSet+0x54>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <FontSet+0x54>)
 8000b94:	811a      	strh	r2, [r3, #8]
	 Font.numchars = (int16_t)fontbyte(3);
 8000b96:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <FontSet+0x54>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3303      	adds	r3, #3
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <FontSet+0x54>)
 8000ba2:	815a      	strh	r2, [r3, #10]
	 Font.inverted = NORMAL;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <FontSet+0x54>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	731a      	strb	r2, [r3, #12]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20000480 	.word	0x20000480

08000bb8 <oled_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void oled_init(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000bbc:	2064      	movs	r0, #100	@ 0x64
 8000bbe:	f000 faed 	bl	800119c <HAL_Delay>
	OLED_Init(&hi2c1);
 8000bc2:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <oled_init+0x24>)
 8000bc4:	f7ff fd78 	bl	80006b8 <OLED_Init>
	FontSet(Segoe_UI_Rus_12);
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <oled_init+0x28>)
 8000bca:	f7ff ffc9 	bl	8000b60 <FontSet>
	OLED_Clear(0);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fdda 	bl	8000788 <OLED_Clear>
	OLED_UpdateScreen();
 8000bd4:	f7ff ff7e 	bl	8000ad4 <OLED_UpdateScreen>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200004c8 	.word	0x200004c8
 8000be0:	08004060 	.word	0x08004060

08000be4 <init>:

void init(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	  oled_init();
 8000be8:	f7ff ffe6 	bl	8000bb8 <oled_init>
	  HAL_ADCEx_Calibration_Start(&hadc1);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <init+0x14>)
 8000bee:	f000 ff25 	bl	8001a3c <HAL_ADCEx_Calibration_Start>
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000498 	.word	0x20000498

08000bfc <loop>:

void loop(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 8000c00:	481f      	ldr	r0, [pc, #124]	@ (8000c80 <loop+0x84>)
 8000c02:	f000 fbc7 	bl	8001394 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8000c06:	2164      	movs	r1, #100	@ 0x64
 8000c08:	481d      	ldr	r0, [pc, #116]	@ (8000c80 <loop+0x84>)
 8000c0a:	f000 fc71 	bl	80014f0 <HAL_ADC_PollForConversion>
	vmeas = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную
 8000c0e:	481c      	ldr	r0, [pc, #112]	@ (8000c80 <loop+0x84>)
 8000c10:	f000 fd74 	bl	80016fc <HAL_ADC_GetValue>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fb56 	bl	80002c8 <__aeabi_ui2f>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4a19      	ldr	r2, [pc, #100]	@ (8000c84 <loop+0x88>)
 8000c20:	6013      	str	r3, [r2, #0]
	//HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
    vmeas=vmeas_prev+((vmeas-vmeas_prev)/filter_coef); //filtering ADC results
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <loop+0x88>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a18      	ldr	r2, [pc, #96]	@ (8000c88 <loop+0x8c>)
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fa99 	bl	8000164 <__aeabi_fsub>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fc51 	bl	80004e0 <__aeabi_fdiv>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <loop+0x8c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4619      	mov	r1, r3
 8000c48:	4610      	mov	r0, r2
 8000c4a:	f7ff fa8d 	bl	8000168 <__addsf3>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <loop+0x88>)
 8000c54:	601a      	str	r2, [r3, #0]
    vmeas_prev=vmeas;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <loop+0x88>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c88 <loop+0x8c>)
 8000c5c:	6013      	str	r3, [r2, #0]

	OLED_Clear(0);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fd92 	bl	8000788 <OLED_Clear>
	OLED_DrawNum(HAL_ADC_GetValue(&hadc1), 1, 1, 1);
 8000c64:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <loop+0x84>)
 8000c66:	f000 fd49 	bl	80016fc <HAL_ADC_GetValue>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	b218      	sxth	r0, r3
 8000c6e:	2301      	movs	r3, #1
 8000c70:	2201      	movs	r2, #1
 8000c72:	2101      	movs	r1, #1
 8000c74:	f7ff fea2 	bl	80009bc <OLED_DrawNum>
	OLED_UpdateScreen();
 8000c78:	f7ff ff2c 	bl	8000ad4 <OLED_UpdateScreen>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000498 	.word	0x20000498
 8000c84:	20000490 	.word	0x20000490
 8000c88:	20000494 	.word	0x20000494

08000c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c90:	f000 fa22 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c94:	f000 f80b 	bl	8000cae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c98:	f000 f8c6 	bl	8000e28 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c9c:	f000 f896 	bl	8000dcc <MX_I2C1_Init>
  MX_ADC1_Init();
 8000ca0:	f000 f856 	bl	8000d50 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000ca4:	f7ff ff9e 	bl	8000be4 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	loop();
 8000ca8:	f7ff ffa8 	bl	8000bfc <loop>
 8000cac:	e7fc      	b.n	8000ca8 <main+0x1c>

08000cae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b094      	sub	sp, #80	@ 0x50
 8000cb2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cb8:	2228      	movs	r2, #40	@ 0x28
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fd31 	bl	8003724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 ff7a 	bl	8002bec <HAL_RCC_OscConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000cfe:	f000 f8a9 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 f9e7 	bl	80030f0 <HAL_RCC_ClockConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d28:	f000 f894 	bl	8000e54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 fb68 	bl	800340c <HAL_RCCEx_PeriphCLKConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d42:	f000 f887 	bl	8000e54 <Error_Handler>
  }
}
 8000d46:	bf00      	nop
 8000d48:	3750      	adds	r7, #80	@ 0x50
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d60:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <MX_ADC1_Init+0x74>)
 8000d62:	4a19      	ldr	r2, [pc, #100]	@ (8000dc8 <MX_ADC1_Init+0x78>)
 8000d64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d66:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <MX_ADC1_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <MX_ADC1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_ADC1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <MX_ADC1_Init+0x74>)
 8000d7a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d80:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <MX_ADC1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_ADC1_Init+0x74>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d8c:	480d      	ldr	r0, [pc, #52]	@ (8000dc4 <MX_ADC1_Init+0x74>)
 8000d8e:	f000 fa29 	bl	80011e4 <HAL_ADC_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d98:	f000 f85c 	bl	8000e54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d9c:	2309      	movs	r3, #9
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_ADC1_Init+0x74>)
 8000dae:	f000 fcb1 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000db8:	f000 f84c 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000498 	.word	0x20000498
 8000dc8:	40012400 	.word	0x40012400

08000dcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000dd2:	4a13      	ldr	r2, [pc, #76]	@ (8000e20 <MX_I2C1_Init+0x54>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000dd8:	4a12      	ldr	r2, [pc, #72]	@ (8000e24 <MX_I2C1_Init+0x58>)
 8000dda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000dea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000e0a:	f001 f925 	bl	8002058 <HAL_I2C_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e14:	f000 f81e 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200004c8 	.word	0x200004c8
 8000e20:	40005400 	.word	0x40005400
 8000e24:	00061a80 	.word	0x00061a80

08000e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <MX_GPIO_Init+0x28>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	4a07      	ldr	r2, [pc, #28]	@ (8000e50 <MX_GPIO_Init+0x28>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	6193      	str	r3, [r2, #24]
 8000e3a:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <MX_GPIO_Init+0x28>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <Error_Handler+0x8>

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <HAL_MspInit+0x5c>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	4a14      	ldr	r2, [pc, #80]	@ (8000ebc <HAL_MspInit+0x5c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6193      	str	r3, [r2, #24]
 8000e72:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_MspInit+0x5c>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <HAL_MspInit+0x5c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a0e      	ldr	r2, [pc, #56]	@ (8000ebc <HAL_MspInit+0x5c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <HAL_MspInit+0x5c>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_MspInit+0x60>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <HAL_MspInit+0x60>)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000

08000ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <HAL_ADC_MspInit+0x6c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d121      	bne.n	8000f28 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee4:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <HAL_ADC_MspInit+0x70>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <HAL_ADC_MspInit+0x70>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <HAL_ADC_MspInit+0x70>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_ADC_MspInit+0x70>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <HAL_ADC_MspInit+0x70>)
 8000f02:	f043 0308 	orr.w	r3, r3, #8
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_ADC_MspInit+0x70>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0308 	and.w	r3, r3, #8
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f14:	2302      	movs	r3, #2
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <HAL_ADC_MspInit+0x74>)
 8000f24:	f000 ff1c 	bl	8001d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40012400 	.word	0x40012400
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010c00 	.word	0x40010c00

08000f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a16      	ldr	r2, [pc, #88]	@ (8000fb0 <HAL_I2C_MspInit+0x74>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d125      	bne.n	8000fa8 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5c:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <HAL_I2C_MspInit+0x78>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <HAL_I2C_MspInit+0x78>)
 8000f62:	f043 0308 	orr.w	r3, r3, #8
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_I2C_MspInit+0x78>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f74:	23c0      	movs	r3, #192	@ 0xc0
 8000f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f78:	2312      	movs	r3, #18
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <HAL_I2C_MspInit+0x7c>)
 8000f8c:	f000 fee8 	bl	8001d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <HAL_I2C_MspInit+0x78>)
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <HAL_I2C_MspInit+0x78>)
 8000f96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f9a:	61d3      	str	r3, [r2, #28]
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <HAL_I2C_MspInit+0x78>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100c:	f000 f8aa 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	@ (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f002 fb76 	bl	8003734 <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20002800 	.word	0x20002800
 8001074:	00000400 	.word	0x00000400
 8001078:	2000051c 	.word	0x2000051c
 800107c:	20000670 	.word	0x20000670

08001080 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800108c:	f7ff fff8 	bl	8001080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480b      	ldr	r0, [pc, #44]	@ (80010c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001092:	490c      	ldr	r1, [pc, #48]	@ (80010c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001094:	4a0c      	ldr	r2, [pc, #48]	@ (80010c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a09      	ldr	r2, [pc, #36]	@ (80010cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010a8:	4c09      	ldr	r4, [pc, #36]	@ (80010d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b6:	f002 fb43 	bl	8003740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ba:	f7ff fde7 	bl	8000c8c <main>
  bx lr
 80010be:	4770      	bx	lr
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010c8:	08004c88 	.word	0x08004c88
  ldr r2, =_sbss
 80010cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010d0:	2000066c 	.word	0x2000066c

080010d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC1_2_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_Init+0x28>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	@ (8001100 <HAL_Init+0x28>)
 80010e2:	f043 0310 	orr.w	r3, r3, #16
 80010e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 fe05 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	200f      	movs	r0, #15
 80010f0:	f000 f808 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff feb4 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40022000 	.word	0x40022000

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_InitTick+0x54>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_InitTick+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fe0f 	bl	8001d46 <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 fde5 	bl	8001d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <HAL_InitTick+0x5c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000000 	.word	0x20000000
 800115c:	20000008 	.word	0x20000008
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_IncTick+0x1c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_IncTick+0x20>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a03      	ldr	r2, [pc, #12]	@ (8001184 <HAL_IncTick+0x20>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000008 	.word	0x20000008
 8001184:	20000520 	.word	0x20000520

08001188 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b02      	ldr	r3, [pc, #8]	@ (8001198 <HAL_GetTick+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000520 	.word	0x20000520

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fff0 	bl	8001188 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffe0 	bl	8001188 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008

080011e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e0be      	b.n	8001384 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001210:	2b00      	cmp	r3, #0
 8001212:	d109      	bne.n	8001228 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fe4e 	bl	8000ec4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fbc5 	bl	80019b8 <ADC_ConversionStop_Disable>
 800122e:	4603      	mov	r3, r0
 8001230:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 8099 	bne.w	8001372 <HAL_ADC_Init+0x18e>
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f040 8095 	bne.w	8001372 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001250:	f023 0302 	bic.w	r3, r3, #2
 8001254:	f043 0202 	orr.w	r2, r3, #2
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001264:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7b1b      	ldrb	r3, [r3, #12]
 800126a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800126c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	4313      	orrs	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800127c:	d003      	beq.n	8001286 <HAL_ADC_Init+0xa2>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d102      	bne.n	800128c <HAL_ADC_Init+0xa8>
 8001286:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800128a:	e000      	b.n	800128e <HAL_ADC_Init+0xaa>
 800128c:	2300      	movs	r3, #0
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7d1b      	ldrb	r3, [r3, #20]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d119      	bne.n	80012d0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7b1b      	ldrb	r3, [r3, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d109      	bne.n	80012b8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	035a      	lsls	r2, r3, #13
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	e00b      	b.n	80012d0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012bc:	f043 0220 	orr.w	r2, r3, #32
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c8:	f043 0201 	orr.w	r2, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	4b28      	ldr	r3, [pc, #160]	@ (800138c <HAL_ADC_Init+0x1a8>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	430b      	orrs	r3, r1
 80012f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001300:	d003      	beq.n	800130a <HAL_ADC_Init+0x126>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d104      	bne.n	8001314 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	3b01      	subs	r3, #1
 8001310:	051b      	lsls	r3, r3, #20
 8001312:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	430a      	orrs	r2, r1
 8001326:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <HAL_ADC_Init+0x1ac>)
 8001330:	4013      	ands	r3, r2
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	429a      	cmp	r2, r3
 8001336:	d10b      	bne.n	8001350 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001342:	f023 0303 	bic.w	r3, r3, #3
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800134e:	e018      	b.n	8001382 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001354:	f023 0312 	bic.w	r3, r3, #18
 8001358:	f043 0210 	orr.w	r2, r3, #16
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001364:	f043 0201 	orr.w	r2, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001370:	e007      	b.n	8001382 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001376:	f043 0210 	orr.w	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001382:	7dfb      	ldrb	r3, [r7, #23]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	ffe1f7fd 	.word	0xffe1f7fd
 8001390:	ff1f0efe 	.word	0xff1f0efe

08001394 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d101      	bne.n	80013ae <HAL_ADC_Start+0x1a>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e098      	b.n	80014e0 <HAL_ADC_Start+0x14c>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 faa4 	bl	8001904 <ADC_Enable>
 80013bc:	4603      	mov	r3, r0
 80013be:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f040 8087 	bne.w	80014d6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a41      	ldr	r2, [pc, #260]	@ (80014e8 <HAL_ADC_Start+0x154>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d105      	bne.n	80013f2 <HAL_ADC_Start+0x5e>
 80013e6:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <HAL_ADC_Start+0x158>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d115      	bne.n	800141e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001408:	2b00      	cmp	r3, #0
 800140a:	d026      	beq.n	800145a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001410:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001414:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800141c:	e01d      	b.n	800145a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001422:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a2f      	ldr	r2, [pc, #188]	@ (80014ec <HAL_ADC_Start+0x158>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d004      	beq.n	800143e <HAL_ADC_Start+0xaa>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a2b      	ldr	r2, [pc, #172]	@ (80014e8 <HAL_ADC_Start+0x154>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d10d      	bne.n	800145a <HAL_ADC_Start+0xc6>
 800143e:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <HAL_ADC_Start+0x158>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001452:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146a:	f023 0206 	bic.w	r2, r3, #6
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001472:	e002      	b.n	800147a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f06f 0202 	mvn.w	r2, #2
 800148a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001496:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800149a:	d113      	bne.n	80014c4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014a0:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <HAL_ADC_Start+0x154>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d105      	bne.n	80014b2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <HAL_ADC_Start+0x158>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d108      	bne.n	80014c4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	e00c      	b.n	80014de <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	e003      	b.n	80014de <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80014de:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40012800 	.word	0x40012800
 80014ec:	40012400 	.word	0x40012400

080014f0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001506:	f7ff fe3f 	bl	8001188 <HAL_GetTick>
 800150a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151e:	f043 0220 	orr.w	r2, r3, #32
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0d3      	b.n	80016da <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d131      	bne.n	80015a4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001546:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800154a:	2b00      	cmp	r3, #0
 800154c:	d12a      	bne.n	80015a4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800154e:	e021      	b.n	8001594 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001556:	d01d      	beq.n	8001594 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <HAL_ADC_PollForConversion+0x7e>
 800155e:	f7ff fe13 	bl	8001188 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d212      	bcs.n	8001594 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10b      	bne.n	8001594 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001580:	f043 0204 	orr.w	r2, r3, #4
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0a2      	b.n	80016da <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0d6      	beq.n	8001550 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015a2:	e070      	b.n	8001686 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015a4:	4b4f      	ldr	r3, [pc, #316]	@ (80016e4 <HAL_ADC_PollForConversion+0x1f4>)
 80015a6:	681c      	ldr	r4, [r3, #0]
 80015a8:	2002      	movs	r0, #2
 80015aa:	f001 ffe5 	bl	8003578 <HAL_RCCEx_GetPeriphCLKFreq>
 80015ae:	4603      	mov	r3, r0
 80015b0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6919      	ldr	r1, [r3, #16]
 80015ba:	4b4b      	ldr	r3, [pc, #300]	@ (80016e8 <HAL_ADC_PollForConversion+0x1f8>)
 80015bc:	400b      	ands	r3, r1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d118      	bne.n	80015f4 <HAL_ADC_PollForConversion+0x104>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68d9      	ldr	r1, [r3, #12]
 80015c8:	4b48      	ldr	r3, [pc, #288]	@ (80016ec <HAL_ADC_PollForConversion+0x1fc>)
 80015ca:	400b      	ands	r3, r1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d111      	bne.n	80015f4 <HAL_ADC_PollForConversion+0x104>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6919      	ldr	r1, [r3, #16]
 80015d6:	4b46      	ldr	r3, [pc, #280]	@ (80016f0 <HAL_ADC_PollForConversion+0x200>)
 80015d8:	400b      	ands	r3, r1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d108      	bne.n	80015f0 <HAL_ADC_PollForConversion+0x100>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68d9      	ldr	r1, [r3, #12]
 80015e4:	4b43      	ldr	r3, [pc, #268]	@ (80016f4 <HAL_ADC_PollForConversion+0x204>)
 80015e6:	400b      	ands	r3, r1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_ADC_PollForConversion+0x100>
 80015ec:	2314      	movs	r3, #20
 80015ee:	e020      	b.n	8001632 <HAL_ADC_PollForConversion+0x142>
 80015f0:	2329      	movs	r3, #41	@ 0x29
 80015f2:	e01e      	b.n	8001632 <HAL_ADC_PollForConversion+0x142>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6919      	ldr	r1, [r3, #16]
 80015fa:	4b3d      	ldr	r3, [pc, #244]	@ (80016f0 <HAL_ADC_PollForConversion+0x200>)
 80015fc:	400b      	ands	r3, r1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <HAL_ADC_PollForConversion+0x120>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68d9      	ldr	r1, [r3, #12]
 8001608:	4b3a      	ldr	r3, [pc, #232]	@ (80016f4 <HAL_ADC_PollForConversion+0x204>)
 800160a:	400b      	ands	r3, r1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00d      	beq.n	800162c <HAL_ADC_PollForConversion+0x13c>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6919      	ldr	r1, [r3, #16]
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <HAL_ADC_PollForConversion+0x208>)
 8001618:	400b      	ands	r3, r1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d108      	bne.n	8001630 <HAL_ADC_PollForConversion+0x140>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68d9      	ldr	r1, [r3, #12]
 8001624:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <HAL_ADC_PollForConversion+0x208>)
 8001626:	400b      	ands	r3, r1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_ADC_PollForConversion+0x140>
 800162c:	2354      	movs	r3, #84	@ 0x54
 800162e:	e000      	b.n	8001632 <HAL_ADC_PollForConversion+0x142>
 8001630:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001638:	e021      	b.n	800167e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d01a      	beq.n	8001678 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HAL_ADC_PollForConversion+0x168>
 8001648:	f7ff fd9e 	bl	8001188 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d20f      	bcs.n	8001678 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	429a      	cmp	r2, r3
 800165e:	d90b      	bls.n	8001678 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001664:	f043 0204 	orr.w	r2, r3, #4
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e030      	b.n	80016da <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3301      	adds	r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	429a      	cmp	r2, r3
 8001684:	d8d9      	bhi.n	800163a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f06f 0212 	mvn.w	r2, #18
 800168e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001694:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016a6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80016aa:	d115      	bne.n	80016d8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d111      	bne.n	80016d8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d0:	f043 0201 	orr.w	r2, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000000 	.word	0x20000000
 80016e8:	24924924 	.word	0x24924924
 80016ec:	00924924 	.word	0x00924924
 80016f0:	12492492 	.word	0x12492492
 80016f4:	00492492 	.word	0x00492492
 80016f8:	00249249 	.word	0x00249249

080016fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x20>
 8001730:	2302      	movs	r3, #2
 8001732:	e0dc      	b.n	80018ee <HAL_ADC_ConfigChannel+0x1da>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b06      	cmp	r3, #6
 8001742:	d81c      	bhi.n	800177e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b05      	subs	r3, #5
 8001756:	221f      	movs	r2, #31
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	4019      	ands	r1, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	3b05      	subs	r3, #5
 8001770:	fa00 f203 	lsl.w	r2, r0, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	635a      	str	r2, [r3, #52]	@ 0x34
 800177c:	e03c      	b.n	80017f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b0c      	cmp	r3, #12
 8001784:	d81c      	bhi.n	80017c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	3b23      	subs	r3, #35	@ 0x23
 8001798:	221f      	movs	r2, #31
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	4019      	ands	r1, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	3b23      	subs	r3, #35	@ 0x23
 80017b2:	fa00 f203 	lsl.w	r2, r0, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80017be:	e01b      	b.n	80017f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	3b41      	subs	r3, #65	@ 0x41
 80017d2:	221f      	movs	r2, #31
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	4019      	ands	r1, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	3b41      	subs	r3, #65	@ 0x41
 80017ec:	fa00 f203 	lsl.w	r2, r0, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d91c      	bls.n	800183a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68d9      	ldr	r1, [r3, #12]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	3b1e      	subs	r3, #30
 8001812:	2207      	movs	r2, #7
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4019      	ands	r1, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6898      	ldr	r0, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	3b1e      	subs	r3, #30
 800182c:	fa00 f203 	lsl.w	r2, r0, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	e019      	b.n	800186e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6919      	ldr	r1, [r3, #16]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	2207      	movs	r2, #7
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	4019      	ands	r1, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6898      	ldr	r0, [r3, #8]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b10      	cmp	r3, #16
 8001874:	d003      	beq.n	800187e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800187a:	2b11      	cmp	r3, #17
 800187c:	d132      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1d      	ldr	r2, [pc, #116]	@ (80018f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d125      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d126      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80018a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d11a      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ae:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <HAL_ADC_ConfigChannel+0x1e8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a13      	ldr	r2, [pc, #76]	@ (8001900 <HAL_ADC_ConfigChannel+0x1ec>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	0c9a      	lsrs	r2, r3, #18
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c4:	e002      	b.n	80018cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f9      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x1b2>
 80018d2:	e007      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d8:	f043 0220 	orr.w	r2, r3, #32
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40012400 	.word	0x40012400
 80018fc:	20000000 	.word	0x20000000
 8001900:	431bde83 	.word	0x431bde83

08001904 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b01      	cmp	r3, #1
 8001920:	d040      	beq.n	80019a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001932:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <ADC_Enable+0xac>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1f      	ldr	r2, [pc, #124]	@ (80019b4 <ADC_Enable+0xb0>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	0c9b      	lsrs	r3, r3, #18
 800193e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001940:	e002      	b.n	8001948 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3b01      	subs	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f9      	bne.n	8001942 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800194e:	f7ff fc1b 	bl	8001188 <HAL_GetTick>
 8001952:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001954:	e01f      	b.n	8001996 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001956:	f7ff fc17 	bl	8001188 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d918      	bls.n	8001996 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b01      	cmp	r3, #1
 8001970:	d011      	beq.n	8001996 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001976:	f043 0210 	orr.w	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e007      	b.n	80019a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d1d8      	bne.n	8001956 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000000 	.word	0x20000000
 80019b4:	431bde83 	.word	0x431bde83

080019b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d12e      	bne.n	8001a30 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019e2:	f7ff fbd1 	bl	8001188 <HAL_GetTick>
 80019e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019e8:	e01b      	b.n	8001a22 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019ea:	f7ff fbcd 	bl	8001188 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d914      	bls.n	8001a22 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d10d      	bne.n	8001a22 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	f043 0210 	orr.w	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e007      	b.n	8001a32 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d0dc      	beq.n	80019ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ADCEx_Calibration_Start+0x1e>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e097      	b.n	8001b8a <HAL_ADCEx_Calibration_Start+0x14e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffa8 	bl	80019b8 <ADC_ConversionStop_Disable>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff49 	bl	8001904 <ADC_Enable>
 8001a72:	4603      	mov	r3, r0
 8001a74:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 8081 	bne.w	8001b80 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a86:	f023 0302 	bic.w	r3, r3, #2
 8001a8a:	f043 0202 	orr.w	r2, r3, #2
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a92:	4b40      	ldr	r3, [pc, #256]	@ (8001b94 <HAL_ADCEx_Calibration_Start+0x158>)
 8001a94:	681c      	ldr	r4, [r3, #0]
 8001a96:	2002      	movs	r0, #2
 8001a98:	f001 fd6e 	bl	8003578 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001aa2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001aa4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001aa6:	e002      	b.n	8001aae <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f9      	bne.n	8001aa8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0208 	orr.w	r2, r2, #8
 8001ac2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001ac4:	f7ff fb60 	bl	8001188 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001aca:	e01b      	b.n	8001b04 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001acc:	f7ff fb5c 	bl	8001188 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b0a      	cmp	r3, #10
 8001ad8:	d914      	bls.n	8001b04 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00d      	beq.n	8001b04 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aec:	f023 0312 	bic.w	r3, r3, #18
 8001af0:	f043 0210 	orr.w	r2, r3, #16
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e042      	b.n	8001b8a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1dc      	bne.n	8001acc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0204 	orr.w	r2, r2, #4
 8001b20:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b22:	f7ff fb31 	bl	8001188 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b28:	e01b      	b.n	8001b62 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b2a:	f7ff fb2d 	bl	8001188 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b0a      	cmp	r3, #10
 8001b36:	d914      	bls.n	8001b62 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00d      	beq.n	8001b62 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4a:	f023 0312 	bic.w	r3, r3, #18
 8001b4e:	f043 0210 	orr.w	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e013      	b.n	8001b8a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1dc      	bne.n	8001b2a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b74:	f023 0303 	bic.w	r3, r3, #3
 8001b78:	f043 0201 	orr.w	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000000 	.word	0x20000000

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db0a      	blt.n	8001c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	490c      	ldr	r1, [pc, #48]	@ (8001c48 <__NVIC_SetPriority+0x4c>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c24:	e00a      	b.n	8001c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4908      	ldr	r1, [pc, #32]	@ (8001c4c <__NVIC_SetPriority+0x50>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3b04      	subs	r3, #4
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000e100 	.word	0xe000e100
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	@ 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f1c3 0307 	rsb	r3, r3, #7
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	bf28      	it	cs
 8001c6e:	2304      	movcs	r3, #4
 8001c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d902      	bls.n	8001c80 <NVIC_EncodePriority+0x30>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b03      	subs	r3, #3
 8001c7e:	e000      	b.n	8001c82 <NVIC_EncodePriority+0x32>
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	4313      	orrs	r3, r2
         );
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	@ 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f7ff ff90 	bl	8001bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff49 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff5e 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff90 	bl	8001c50 <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5f 	bl	8001bfc <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffb0 	bl	8001cb4 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b08b      	sub	sp, #44	@ 0x2c
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d72:	e161      	b.n	8002038 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d74:	2201      	movs	r2, #1
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	f040 8150 	bne.w	8002032 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a97      	ldr	r2, [pc, #604]	@ (8001ff4 <HAL_GPIO_Init+0x294>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d05e      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001d9c:	4a95      	ldr	r2, [pc, #596]	@ (8001ff4 <HAL_GPIO_Init+0x294>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d875      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001da2:	4a95      	ldr	r2, [pc, #596]	@ (8001ff8 <HAL_GPIO_Init+0x298>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d058      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001da8:	4a93      	ldr	r2, [pc, #588]	@ (8001ff8 <HAL_GPIO_Init+0x298>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d86f      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dae:	4a93      	ldr	r2, [pc, #588]	@ (8001ffc <HAL_GPIO_Init+0x29c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d052      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001db4:	4a91      	ldr	r2, [pc, #580]	@ (8001ffc <HAL_GPIO_Init+0x29c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d869      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dba:	4a91      	ldr	r2, [pc, #580]	@ (8002000 <HAL_GPIO_Init+0x2a0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d04c      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001dc0:	4a8f      	ldr	r2, [pc, #572]	@ (8002000 <HAL_GPIO_Init+0x2a0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d863      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dc6:	4a8f      	ldr	r2, [pc, #572]	@ (8002004 <HAL_GPIO_Init+0x2a4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d046      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001dcc:	4a8d      	ldr	r2, [pc, #564]	@ (8002004 <HAL_GPIO_Init+0x2a4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d85d      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dd2:	2b12      	cmp	r3, #18
 8001dd4:	d82a      	bhi.n	8001e2c <HAL_GPIO_Init+0xcc>
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	d859      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dda:	a201      	add	r2, pc, #4	@ (adr r2, 8001de0 <HAL_GPIO_Init+0x80>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001e5b 	.word	0x08001e5b
 8001de4:	08001e35 	.word	0x08001e35
 8001de8:	08001e47 	.word	0x08001e47
 8001dec:	08001e89 	.word	0x08001e89
 8001df0:	08001e8f 	.word	0x08001e8f
 8001df4:	08001e8f 	.word	0x08001e8f
 8001df8:	08001e8f 	.word	0x08001e8f
 8001dfc:	08001e8f 	.word	0x08001e8f
 8001e00:	08001e8f 	.word	0x08001e8f
 8001e04:	08001e8f 	.word	0x08001e8f
 8001e08:	08001e8f 	.word	0x08001e8f
 8001e0c:	08001e8f 	.word	0x08001e8f
 8001e10:	08001e8f 	.word	0x08001e8f
 8001e14:	08001e8f 	.word	0x08001e8f
 8001e18:	08001e8f 	.word	0x08001e8f
 8001e1c:	08001e8f 	.word	0x08001e8f
 8001e20:	08001e8f 	.word	0x08001e8f
 8001e24:	08001e3d 	.word	0x08001e3d
 8001e28:	08001e51 	.word	0x08001e51
 8001e2c:	4a76      	ldr	r2, [pc, #472]	@ (8002008 <HAL_GPIO_Init+0x2a8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e32:	e02c      	b.n	8001e8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	623b      	str	r3, [r7, #32]
          break;
 8001e3a:	e029      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	3304      	adds	r3, #4
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e024      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	3308      	adds	r3, #8
 8001e4c:	623b      	str	r3, [r7, #32]
          break;
 8001e4e:	e01f      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	330c      	adds	r3, #12
 8001e56:	623b      	str	r3, [r7, #32]
          break;
 8001e58:	e01a      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e62:	2304      	movs	r3, #4
 8001e64:	623b      	str	r3, [r7, #32]
          break;
 8001e66:	e013      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e70:	2308      	movs	r3, #8
 8001e72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	611a      	str	r2, [r3, #16]
          break;
 8001e7a:	e009      	b.n	8001e90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	615a      	str	r2, [r3, #20]
          break;
 8001e86:	e003      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
          break;
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          break;
 8001e8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2bff      	cmp	r3, #255	@ 0xff
 8001e94:	d801      	bhi.n	8001e9a <HAL_GPIO_Init+0x13a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	e001      	b.n	8001e9e <HAL_GPIO_Init+0x13e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2bff      	cmp	r3, #255	@ 0xff
 8001ea4:	d802      	bhi.n	8001eac <HAL_GPIO_Init+0x14c>
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	e002      	b.n	8001eb2 <HAL_GPIO_Init+0x152>
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	3b08      	subs	r3, #8
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	210f      	movs	r1, #15
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	6a39      	ldr	r1, [r7, #32]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80a9 	beq.w	8002032 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	@ (800200c <HAL_GPIO_Init+0x2ac>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a49      	ldr	r2, [pc, #292]	@ (800200c <HAL_GPIO_Init+0x2ac>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b47      	ldr	r3, [pc, #284]	@ (800200c <HAL_GPIO_Init+0x2ac>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ef8:	4a45      	ldr	r2, [pc, #276]	@ (8002010 <HAL_GPIO_Init+0x2b0>)
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a3d      	ldr	r2, [pc, #244]	@ (8002014 <HAL_GPIO_Init+0x2b4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00d      	beq.n	8001f40 <HAL_GPIO_Init+0x1e0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3c      	ldr	r2, [pc, #240]	@ (8002018 <HAL_GPIO_Init+0x2b8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d007      	beq.n	8001f3c <HAL_GPIO_Init+0x1dc>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3b      	ldr	r2, [pc, #236]	@ (800201c <HAL_GPIO_Init+0x2bc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d101      	bne.n	8001f38 <HAL_GPIO_Init+0x1d8>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e004      	b.n	8001f42 <HAL_GPIO_Init+0x1e2>
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e002      	b.n	8001f42 <HAL_GPIO_Init+0x1e2>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_GPIO_Init+0x1e2>
 8001f40:	2300      	movs	r3, #0
 8001f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f44:	f002 0203 	and.w	r2, r2, #3
 8001f48:	0092      	lsls	r2, r2, #2
 8001f4a:	4093      	lsls	r3, r2
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f52:	492f      	ldr	r1, [pc, #188]	@ (8002010 <HAL_GPIO_Init+0x2b0>)
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	492b      	ldr	r1, [pc, #172]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f7a:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4927      	ldr	r1, [pc, #156]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f94:	4b22      	ldr	r3, [pc, #136]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4921      	ldr	r1, [pc, #132]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	491d      	ldr	r1, [pc, #116]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fbc:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4917      	ldr	r1, [pc, #92]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fca:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4913      	ldr	r1, [pc, #76]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01f      	beq.n	8002024 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	490d      	ldr	r1, [pc, #52]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e01f      	b.n	8002032 <HAL_GPIO_Init+0x2d2>
 8001ff2:	bf00      	nop
 8001ff4:	10320000 	.word	0x10320000
 8001ff8:	10310000 	.word	0x10310000
 8001ffc:	10220000 	.word	0x10220000
 8002000:	10210000 	.word	0x10210000
 8002004:	10120000 	.word	0x10120000
 8002008:	10110000 	.word	0x10110000
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000
 8002014:	40010800 	.word	0x40010800
 8002018:	40010c00 	.word	0x40010c00
 800201c:	40011000 	.word	0x40011000
 8002020:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <HAL_GPIO_Init+0x2f4>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	43db      	mvns	r3, r3
 800202c:	4909      	ldr	r1, [pc, #36]	@ (8002054 <HAL_GPIO_Init+0x2f4>)
 800202e:	4013      	ands	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	3301      	adds	r3, #1
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	f47f ae96 	bne.w	8001d74 <HAL_GPIO_Init+0x14>
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	372c      	adds	r7, #44	@ 0x2c
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	40010400 	.word	0x40010400

08002058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e12b      	b.n	80022c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe ff5c 	bl	8000f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2224      	movs	r2, #36	@ 0x24
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020bc:	f001 f960 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 80020c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a81      	ldr	r2, [pc, #516]	@ (80022cc <HAL_I2C_Init+0x274>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d807      	bhi.n	80020dc <HAL_I2C_Init+0x84>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4a80      	ldr	r2, [pc, #512]	@ (80022d0 <HAL_I2C_Init+0x278>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	bf94      	ite	ls
 80020d4:	2301      	movls	r3, #1
 80020d6:	2300      	movhi	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e006      	b.n	80020ea <HAL_I2C_Init+0x92>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4a7d      	ldr	r2, [pc, #500]	@ (80022d4 <HAL_I2C_Init+0x27c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	bf94      	ite	ls
 80020e4:	2301      	movls	r3, #1
 80020e6:	2300      	movhi	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0e7      	b.n	80022c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a78      	ldr	r2, [pc, #480]	@ (80022d8 <HAL_I2C_Init+0x280>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	0c9b      	lsrs	r3, r3, #18
 80020fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	430a      	orrs	r2, r1
 8002110:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a6a      	ldr	r2, [pc, #424]	@ (80022cc <HAL_I2C_Init+0x274>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d802      	bhi.n	800212c <HAL_I2C_Init+0xd4>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	e009      	b.n	8002140 <HAL_I2C_Init+0xe8>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	4a69      	ldr	r2, [pc, #420]	@ (80022dc <HAL_I2C_Init+0x284>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	3301      	adds	r3, #1
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	430b      	orrs	r3, r1
 8002146:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002152:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	495c      	ldr	r1, [pc, #368]	@ (80022cc <HAL_I2C_Init+0x274>)
 800215c:	428b      	cmp	r3, r1
 800215e:	d819      	bhi.n	8002194 <HAL_I2C_Init+0x13c>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1e59      	subs	r1, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fbb1 f3f3 	udiv	r3, r1, r3
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002174:	400b      	ands	r3, r1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_I2C_Init+0x138>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1e59      	subs	r1, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fbb1 f3f3 	udiv	r3, r1, r3
 8002188:	3301      	adds	r3, #1
 800218a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218e:	e051      	b.n	8002234 <HAL_I2C_Init+0x1dc>
 8002190:	2304      	movs	r3, #4
 8002192:	e04f      	b.n	8002234 <HAL_I2C_Init+0x1dc>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d111      	bne.n	80021c0 <HAL_I2C_Init+0x168>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1e58      	subs	r0, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	e012      	b.n	80021e6 <HAL_I2C_Init+0x18e>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1e58      	subs	r0, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	0099      	lsls	r1, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Init+0x196>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e022      	b.n	8002234 <HAL_I2C_Init+0x1dc>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10e      	bne.n	8002214 <HAL_I2C_Init+0x1bc>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1e58      	subs	r0, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6859      	ldr	r1, [r3, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	440b      	add	r3, r1
 8002204:	fbb0 f3f3 	udiv	r3, r0, r3
 8002208:	3301      	adds	r3, #1
 800220a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002212:	e00f      	b.n	8002234 <HAL_I2C_Init+0x1dc>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e58      	subs	r0, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	0099      	lsls	r1, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	fbb0 f3f3 	udiv	r3, r0, r3
 800222a:	3301      	adds	r3, #1
 800222c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002230:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	6809      	ldr	r1, [r1, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002262:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6911      	ldr	r1, [r2, #16]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	4311      	orrs	r1, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	430b      	orrs	r3, r1
 8002276:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2220      	movs	r2, #32
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	000186a0 	.word	0x000186a0
 80022d0:	001e847f 	.word	0x001e847f
 80022d4:	003d08ff 	.word	0x003d08ff
 80022d8:	431bde83 	.word	0x431bde83
 80022dc:	10624dd3 	.word	0x10624dd3

080022e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	461a      	mov	r2, r3
 80022ec:	460b      	mov	r3, r1
 80022ee:	817b      	strh	r3, [r7, #10]
 80022f0:	4613      	mov	r3, r2
 80022f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7fe ff48 	bl	8001188 <HAL_GetTick>
 80022f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b20      	cmp	r3, #32
 8002304:	f040 80e0 	bne.w	80024c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2319      	movs	r3, #25
 800230e:	2201      	movs	r2, #1
 8002310:	4970      	ldr	r1, [pc, #448]	@ (80024d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fa92 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
 8002320:	e0d3      	b.n	80024ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_I2C_Master_Transmit+0x50>
 800232c:	2302      	movs	r3, #2
 800232e:	e0cc      	b.n	80024ca <HAL_I2C_Master_Transmit+0x1ea>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d007      	beq.n	8002356 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002364:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2221      	movs	r2, #33	@ 0x21
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2210      	movs	r2, #16
 8002372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	893a      	ldrh	r2, [r7, #8]
 8002386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4a50      	ldr	r2, [pc, #320]	@ (80024d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002396:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002398:	8979      	ldrh	r1, [r7, #10]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f9ca 	bl	8002738 <I2C_MasterRequestWrite>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e08d      	b.n	80024ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023c4:	e066      	b.n	8002494 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	6a39      	ldr	r1, [r7, #32]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fb50 	bl	8002a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00d      	beq.n	80023f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d107      	bne.n	80023ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e06b      	b.n	80024ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b04      	cmp	r3, #4
 800242e:	d11b      	bne.n	8002468 <HAL_I2C_Master_Transmit+0x188>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002434:	2b00      	cmp	r3, #0
 8002436:	d017      	beq.n	8002468 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	6a39      	ldr	r1, [r7, #32]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fb47 	bl	8002b00 <I2C_WaitOnBTFFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	2b04      	cmp	r3, #4
 800247e:	d107      	bne.n	8002490 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800248e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e01a      	b.n	80024ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	d194      	bne.n	80023c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e000      	b.n	80024ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024c8:	2302      	movs	r3, #2
  }
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	00100002 	.word	0x00100002
 80024d8:	ffff0000 	.word	0xffff0000

080024dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	@ 0x28
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	460b      	mov	r3, r1
 80024ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7fe fe4c 	bl	8001188 <HAL_GetTick>
 80024f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b20      	cmp	r3, #32
 8002500:	f040 8111 	bne.w	8002726 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2319      	movs	r3, #25
 800250a:	2201      	movs	r2, #1
 800250c:	4988      	ldr	r1, [pc, #544]	@ (8002730 <HAL_I2C_IsDeviceReady+0x254>)
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f994 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
 800251c:	e104      	b.n	8002728 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_I2C_IsDeviceReady+0x50>
 8002528:	2302      	movs	r3, #2
 800252a:	e0fd      	b.n	8002728 <HAL_I2C_IsDeviceReady+0x24c>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b01      	cmp	r3, #1
 8002540:	d007      	beq.n	8002552 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002560:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2224      	movs	r2, #36	@ 0x24
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4a70      	ldr	r2, [pc, #448]	@ (8002734 <HAL_I2C_IsDeviceReady+0x258>)
 8002574:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002584:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2200      	movs	r2, #0
 800258e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f952 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00d      	beq.n	80025ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025ac:	d103      	bne.n	80025b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e0b6      	b.n	8002728 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ba:	897b      	ldrh	r3, [r7, #10]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025ca:	f7fe fddd 	bl	8001188 <HAL_GetTick>
 80025ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	bf0c      	ite	eq
 80025de:	2301      	moveq	r3, #1
 80025e0:	2300      	movne	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f4:	bf0c      	ite	eq
 80025f6:	2301      	moveq	r3, #1
 80025f8:	2300      	movne	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025fe:	e025      	b.n	800264c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002600:	f7fe fdc2 	bl	8001188 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d302      	bcc.n	8002616 <HAL_I2C_IsDeviceReady+0x13a>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	22a0      	movs	r2, #160	@ 0xa0
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b02      	cmp	r3, #2
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2ba0      	cmp	r3, #160	@ 0xa0
 8002656:	d005      	beq.n	8002664 <HAL_I2C_IsDeviceReady+0x188>
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <HAL_I2C_IsDeviceReady+0x188>
 800265e:	7dbb      	ldrb	r3, [r7, #22]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0cd      	beq.n	8002600 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b02      	cmp	r3, #2
 8002678:	d129      	bne.n	80026ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002688:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2319      	movs	r3, #25
 80026a6:	2201      	movs	r2, #1
 80026a8:	4921      	ldr	r1, [pc, #132]	@ (8002730 <HAL_I2C_IsDeviceReady+0x254>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f8c6 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e036      	b.n	8002728 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e02c      	b.n	8002728 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2319      	movs	r3, #25
 80026ee:	2201      	movs	r2, #1
 80026f0:	490f      	ldr	r1, [pc, #60]	@ (8002730 <HAL_I2C_IsDeviceReady+0x254>)
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f8a2 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e012      	b.n	8002728 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	3301      	adds	r3, #1
 8002706:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	429a      	cmp	r2, r3
 800270e:	f4ff af32 	bcc.w	8002576 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
  }
}
 8002728:	4618      	mov	r0, r3
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	00100002 	.word	0x00100002
 8002734:	ffff0000 	.word	0xffff0000

08002738 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	460b      	mov	r3, r1
 8002746:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d006      	beq.n	8002762 <I2C_MasterRequestWrite+0x2a>
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d003      	beq.n	8002762 <I2C_MasterRequestWrite+0x2a>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002760:	d108      	bne.n	8002774 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e00b      	b.n	800278c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	2b12      	cmp	r3, #18
 800277a:	d107      	bne.n	800278c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800278a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f84f 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00d      	beq.n	80027c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027b2:	d103      	bne.n	80027bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e035      	b.n	800282c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027c8:	d108      	bne.n	80027dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ca:	897b      	ldrh	r3, [r7, #10]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027d8:	611a      	str	r2, [r3, #16]
 80027da:	e01b      	b.n	8002814 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027dc:	897b      	ldrh	r3, [r7, #10]
 80027de:	11db      	asrs	r3, r3, #7
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f003 0306 	and.w	r3, r3, #6
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f063 030f 	orn	r3, r3, #15
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	490e      	ldr	r1, [pc, #56]	@ (8002834 <I2C_MasterRequestWrite+0xfc>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f898 	bl	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e010      	b.n	800282c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4907      	ldr	r1, [pc, #28]	@ (8002838 <I2C_MasterRequestWrite+0x100>)
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f888 	bl	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	00010008 	.word	0x00010008
 8002838:	00010002 	.word	0x00010002

0800283c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800284c:	e048      	b.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d044      	beq.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002856:	f7fe fc97 	bl	8001188 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d139      	bne.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	0c1b      	lsrs	r3, r3, #16
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10d      	bne.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	43da      	mvns	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4013      	ands	r3, r2
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	e00c      	b.n	80028ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	43da      	mvns	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4013      	ands	r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d116      	bne.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f043 0220 	orr.w	r2, r3, #32
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e023      	b.n	8002928 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10d      	bne.n	8002906 <I2C_WaitOnFlagUntilTimeout+0xca>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	43da      	mvns	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	e00c      	b.n	8002920 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	43da      	mvns	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4013      	ands	r3, r2
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	429a      	cmp	r2, r3
 8002924:	d093      	beq.n	800284e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800293e:	e071      	b.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800294e:	d123      	bne.n	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002968:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	f043 0204 	orr.w	r2, r3, #4
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e067      	b.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299e:	d041      	beq.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a0:	f7fe fbf2 	bl	8001188 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d302      	bcc.n	80029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d136      	bne.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d10c      	bne.n	80029da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	43da      	mvns	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4013      	ands	r3, r2
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bf14      	ite	ne
 80029d2:	2301      	movne	r3, #1
 80029d4:	2300      	moveq	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	e00b      	b.n	80029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	43da      	mvns	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e021      	b.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	0c1b      	lsrs	r3, r3, #16
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d10c      	bne.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	43da      	mvns	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf14      	ite	ne
 8002a40:	2301      	movne	r3, #1
 8002a42:	2300      	moveq	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e00b      	b.n	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4013      	ands	r3, r2
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f47f af6d 	bne.w	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a7c:	e034      	b.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f886 	bl	8002b90 <I2C_IsAcknowledgeFailed>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e034      	b.n	8002af8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d028      	beq.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a96:	f7fe fb77 	bl	8001188 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d302      	bcc.n	8002aac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d11d      	bne.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab6:	2b80      	cmp	r3, #128	@ 0x80
 8002ab8:	d016      	beq.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e007      	b.n	8002af8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af2:	2b80      	cmp	r3, #128	@ 0x80
 8002af4:	d1c3      	bne.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b0c:	e034      	b.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f83e 	bl	8002b90 <I2C_IsAcknowledgeFailed>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e034      	b.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d028      	beq.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7fe fb2f 	bl	8001188 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d11d      	bne.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d016      	beq.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e007      	b.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d1c3      	bne.n	8002b0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba6:	d11b      	bne.n	8002be0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e272      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8087 	beq.w	8002d1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c0c:	4b92      	ldr	r3, [pc, #584]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d00c      	beq.n	8002c32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c18:	4b8f      	ldr	r3, [pc, #572]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d112      	bne.n	8002c4a <HAL_RCC_OscConfig+0x5e>
 8002c24:	4b8c      	ldr	r3, [pc, #560]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c30:	d10b      	bne.n	8002c4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c32:	4b89      	ldr	r3, [pc, #548]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d06c      	beq.n	8002d18 <HAL_RCC_OscConfig+0x12c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d168      	bne.n	8002d18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e24c      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x76>
 8002c54:	4b80      	ldr	r3, [pc, #512]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a7f      	ldr	r2, [pc, #508]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	e02e      	b.n	8002cc0 <HAL_RCC_OscConfig+0xd4>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x98>
 8002c6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a7a      	ldr	r2, [pc, #488]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b78      	ldr	r3, [pc, #480]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a77      	ldr	r2, [pc, #476]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e01d      	b.n	8002cc0 <HAL_RCC_OscConfig+0xd4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xbc>
 8002c8e:	4b72      	ldr	r3, [pc, #456]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a71      	ldr	r2, [pc, #452]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0xd4>
 8002ca8:	4b6b      	ldr	r3, [pc, #428]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a6a      	ldr	r2, [pc, #424]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b68      	ldr	r3, [pc, #416]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a67      	ldr	r2, [pc, #412]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fa5e 	bl	8001188 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fa5a 	bl	8001188 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	@ 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e200      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xe4>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fa4a 	bl	8001188 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fa46 	bl	8001188 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	@ 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1ec      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	4b53      	ldr	r3, [pc, #332]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x10c>
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d063      	beq.n	8002dee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d26:	4b4c      	ldr	r3, [pc, #304]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d32:	4b49      	ldr	r3, [pc, #292]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d11c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x18c>
 8002d3e:	4b46      	ldr	r3, [pc, #280]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d116      	bne.n	8002d78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	4b43      	ldr	r3, [pc, #268]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x176>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e1c0      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b3d      	ldr	r3, [pc, #244]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4939      	ldr	r1, [pc, #228]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	e03a      	b.n	8002dee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d80:	4b36      	ldr	r3, [pc, #216]	@ (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe f9ff 	bl	8001188 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7fe f9fb 	bl	8001188 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e1a1      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dac:	4b2a      	ldr	r3, [pc, #168]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4927      	ldr	r1, [pc, #156]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc2:	4b26      	ldr	r3, [pc, #152]	@ (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe f9de 	bl	8001188 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7fe f9da 	bl	8001188 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e180      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d03a      	beq.n	8002e70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d019      	beq.n	8002e36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e02:	4b17      	ldr	r3, [pc, #92]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7fe f9be 	bl	8001188 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fe f9ba 	bl	8001188 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e160      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f000 face 	bl	80033d0 <RCC_Delay>
 8002e34:	e01c      	b.n	8002e70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e36:	4b0a      	ldr	r3, [pc, #40]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3c:	f7fe f9a4 	bl	8001188 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e42:	e00f      	b.n	8002e64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fe f9a0 	bl	8001188 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d908      	bls.n	8002e64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e146      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	42420000 	.word	0x42420000
 8002e60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	4b92      	ldr	r3, [pc, #584]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e9      	bne.n	8002e44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a6 	beq.w	8002fca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e82:	4b8b      	ldr	r3, [pc, #556]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10d      	bne.n	8002eaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	4b88      	ldr	r3, [pc, #544]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4a87      	ldr	r2, [pc, #540]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e98:	61d3      	str	r3, [r2, #28]
 8002e9a:	4b85      	ldr	r3, [pc, #532]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b82      	ldr	r3, [pc, #520]	@ (80030b4 <HAL_RCC_OscConfig+0x4c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d118      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80030b4 <HAL_RCC_OscConfig+0x4c8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7e      	ldr	r2, [pc, #504]	@ (80030b4 <HAL_RCC_OscConfig+0x4c8>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe f961 	bl	8001188 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7fe f95d 	bl	8001188 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b64      	cmp	r3, #100	@ 0x64
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e103      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	4b75      	ldr	r3, [pc, #468]	@ (80030b4 <HAL_RCC_OscConfig+0x4c8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x312>
 8002ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	e02d      	b.n	8002f5a <HAL_RCC_OscConfig+0x36e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x334>
 8002f06:	4b6a      	ldr	r3, [pc, #424]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4a69      	ldr	r2, [pc, #420]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6213      	str	r3, [r2, #32]
 8002f12:	4b67      	ldr	r3, [pc, #412]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4a66      	ldr	r2, [pc, #408]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	6213      	str	r3, [r2, #32]
 8002f1e:	e01c      	b.n	8002f5a <HAL_RCC_OscConfig+0x36e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x356>
 8002f28:	4b61      	ldr	r3, [pc, #388]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4a60      	ldr	r2, [pc, #384]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	6213      	str	r3, [r2, #32]
 8002f34:	4b5e      	ldr	r3, [pc, #376]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4a5d      	ldr	r2, [pc, #372]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6213      	str	r3, [r2, #32]
 8002f40:	e00b      	b.n	8002f5a <HAL_RCC_OscConfig+0x36e>
 8002f42:	4b5b      	ldr	r3, [pc, #364]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4a5a      	ldr	r2, [pc, #360]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	6213      	str	r3, [r2, #32]
 8002f4e:	4b58      	ldr	r3, [pc, #352]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	4a57      	ldr	r2, [pc, #348]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	f023 0304 	bic.w	r3, r3, #4
 8002f58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d015      	beq.n	8002f8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f62:	f7fe f911 	bl	8001188 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe f90d 	bl	8001188 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e0b1      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f80:	4b4b      	ldr	r3, [pc, #300]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ee      	beq.n	8002f6a <HAL_RCC_OscConfig+0x37e>
 8002f8c:	e014      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe f8fb 	bl	8001188 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe f8f7 	bl	8001188 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e09b      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fac:	4b40      	ldr	r3, [pc, #256]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ee      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d105      	bne.n	8002fca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbe:	4b3c      	ldr	r3, [pc, #240]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4a3b      	ldr	r2, [pc, #236]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8087 	beq.w	80030e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd4:	4b36      	ldr	r3, [pc, #216]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d061      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d146      	bne.n	8003076 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe8:	4b33      	ldr	r3, [pc, #204]	@ (80030b8 <HAL_RCC_OscConfig+0x4cc>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fe f8cb 	bl	8001188 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe f8c7 	bl	8001188 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e06d      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003008:	4b29      	ldr	r3, [pc, #164]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f0      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800301c:	d108      	bne.n	8003030 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800301e:	4b24      	ldr	r3, [pc, #144]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	4921      	ldr	r1, [pc, #132]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003030:	4b1f      	ldr	r3, [pc, #124]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a19      	ldr	r1, [r3, #32]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	430b      	orrs	r3, r1
 8003042:	491b      	ldr	r1, [pc, #108]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003048:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <HAL_RCC_OscConfig+0x4cc>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fe f89b 	bl	8001188 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003056:	f7fe f897 	bl	8001188 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e03d      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x46a>
 8003074:	e035      	b.n	80030e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003076:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <HAL_RCC_OscConfig+0x4cc>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe f884 	bl	8001188 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe f880 	bl	8001188 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e026      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x498>
 80030a2:	e01e      	b.n	80030e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e019      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40007000 	.word	0x40007000
 80030b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_RCC_OscConfig+0x500>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000

080030f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0d0      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b6a      	ldr	r3, [pc, #424]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d910      	bls.n	8003134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b67      	ldr	r3, [pc, #412]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 0207 	bic.w	r2, r3, #7
 800311a:	4965      	ldr	r1, [pc, #404]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b63      	ldr	r3, [pc, #396]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0b8      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800314c:	4b59      	ldr	r3, [pc, #356]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a58      	ldr	r2, [pc, #352]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003156:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003164:	4b53      	ldr	r3, [pc, #332]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a52      	ldr	r2, [pc, #328]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800316e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003170:	4b50      	ldr	r3, [pc, #320]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	494d      	ldr	r1, [pc, #308]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d040      	beq.n	8003210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b47      	ldr	r3, [pc, #284]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d115      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e07f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b41      	ldr	r3, [pc, #260]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e073      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	4b3d      	ldr	r3, [pc, #244]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e06b      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b39      	ldr	r3, [pc, #228]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4936      	ldr	r1, [pc, #216]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e0:	f7fd ffd2 	bl	8001188 <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fd ffce 	bl	8001188 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e053      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b2d      	ldr	r3, [pc, #180]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b27      	ldr	r3, [pc, #156]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d210      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b24      	ldr	r3, [pc, #144]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 0207 	bic.w	r2, r3, #7
 8003226:	4922      	ldr	r1, [pc, #136]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b20      	ldr	r3, [pc, #128]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e032      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800324c:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4916      	ldr	r1, [pc, #88]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800326a:	4b12      	ldr	r3, [pc, #72]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	490e      	ldr	r1, [pc, #56]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800327e:	f000 f821 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 8003282:	4602      	mov	r2, r0
 8003284:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	490a      	ldr	r1, [pc, #40]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	5ccb      	ldrb	r3, [r1, r3]
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	4a09      	ldr	r2, [pc, #36]	@ (80032bc <HAL_RCC_ClockConfig+0x1cc>)
 8003298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800329a:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <HAL_RCC_ClockConfig+0x1d0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd ff30 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40022000 	.word	0x40022000
 80032b4:	40021000 	.word	0x40021000
 80032b8:	08004c04 	.word	0x08004c04
 80032bc:	20000000 	.word	0x20000000
 80032c0:	20000004 	.word	0x20000004

080032c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032de:	4b1e      	ldr	r3, [pc, #120]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x94>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d002      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x30>
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d003      	beq.n	80032fa <HAL_RCC_GetSysClockFreq+0x36>
 80032f2:	e027      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032f4:	4b19      	ldr	r3, [pc, #100]	@ (800335c <HAL_RCC_GetSysClockFreq+0x98>)
 80032f6:	613b      	str	r3, [r7, #16]
      break;
 80032f8:	e027      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	0c9b      	lsrs	r3, r3, #18
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	4a17      	ldr	r2, [pc, #92]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003304:	5cd3      	ldrb	r3, [r2, r3]
 8003306:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d010      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003312:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x94>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	0c5b      	lsrs	r3, r3, #17
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	4a11      	ldr	r2, [pc, #68]	@ (8003364 <HAL_RCC_GetSysClockFreq+0xa0>)
 800331e:	5cd3      	ldrb	r3, [r2, r3]
 8003320:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a0d      	ldr	r2, [pc, #52]	@ (800335c <HAL_RCC_GetSysClockFreq+0x98>)
 8003326:	fb03 f202 	mul.w	r2, r3, r2
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e004      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a0c      	ldr	r2, [pc, #48]	@ (8003368 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	613b      	str	r3, [r7, #16]
      break;
 8003342:	e002      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <HAL_RCC_GetSysClockFreq+0x98>)
 8003346:	613b      	str	r3, [r7, #16]
      break;
 8003348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800334a:	693b      	ldr	r3, [r7, #16]
}
 800334c:	4618      	mov	r0, r3
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
 800335c:	007a1200 	.word	0x007a1200
 8003360:	08004c1c 	.word	0x08004c1c
 8003364:	08004c2c 	.word	0x08004c2c
 8003368:	003d0900 	.word	0x003d0900

0800336c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003370:	4b02      	ldr	r3, [pc, #8]	@ (800337c <HAL_RCC_GetHCLKFreq+0x10>)
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	20000000 	.word	0x20000000

08003380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003384:	f7ff fff2 	bl	800336c <HAL_RCC_GetHCLKFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	4903      	ldr	r1, [pc, #12]	@ (80033a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003396:	5ccb      	ldrb	r3, [r1, r3]
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000
 80033a4:	08004c14 	.word	0x08004c14

080033a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033ac:	f7ff ffde 	bl	800336c <HAL_RCC_GetHCLKFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	0adb      	lsrs	r3, r3, #11
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4903      	ldr	r1, [pc, #12]	@ (80033cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000
 80033cc:	08004c14 	.word	0x08004c14

080033d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003404 <RCC_Delay+0x34>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003408 <RCC_Delay+0x38>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0a5b      	lsrs	r3, r3, #9
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033ec:	bf00      	nop
  }
  while (Delay --);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	60fa      	str	r2, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f9      	bne.n	80033ec <RCC_Delay+0x1c>
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	20000000 	.word	0x20000000
 8003408:	10624dd3 	.word	0x10624dd3

0800340c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d07d      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003428:	2300      	movs	r3, #0
 800342a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342c:	4b4f      	ldr	r3, [pc, #316]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10d      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	4b4c      	ldr	r3, [pc, #304]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	4a4b      	ldr	r2, [pc, #300]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003442:	61d3      	str	r3, [r2, #28]
 8003444:	4b49      	ldr	r3, [pc, #292]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003450:	2301      	movs	r3, #1
 8003452:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b46      	ldr	r3, [pc, #280]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d118      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003460:	4b43      	ldr	r3, [pc, #268]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a42      	ldr	r2, [pc, #264]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800346a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346c:	f7fd fe8c 	bl	8001188 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003472:	e008      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003474:	f7fd fe88 	bl	8001188 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	@ 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e06d      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003486:	4b3a      	ldr	r3, [pc, #232]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003492:	4b36      	ldr	r3, [pc, #216]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800349a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d02e      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d027      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034b0:	4b2e      	ldr	r3, [pc, #184]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034bc:	2201      	movs	r2, #1
 80034be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034c6:	4a29      	ldr	r2, [pc, #164]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d014      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fd fe57 	bl	8001188 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fd fe53 	bl	8001188 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e036      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	4b1d      	ldr	r3, [pc, #116]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0ee      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003500:	4b1a      	ldr	r3, [pc, #104]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	4917      	ldr	r1, [pc, #92]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350e:	4313      	orrs	r3, r2
 8003510:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003512:	7dfb      	ldrb	r3, [r7, #23]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d105      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003518:	4b14      	ldr	r3, [pc, #80]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	4a13      	ldr	r2, [pc, #76]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003522:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003530:	4b0e      	ldr	r3, [pc, #56]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	490b      	ldr	r1, [pc, #44]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800354e:	4b07      	ldr	r3, [pc, #28]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	4904      	ldr	r1, [pc, #16]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	40007000 	.word	0x40007000
 8003574:	42420440 	.word	0x42420440

08003578 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	2300      	movs	r3, #0
 8003586:	61fb      	str	r3, [r7, #28]
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b10      	cmp	r3, #16
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b10      	cmp	r3, #16
 800359e:	f200 808a 	bhi.w	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d045      	beq.n	8003634 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d075      	beq.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80035ae:	e082      	b.n	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80035b0:	4b46      	ldr	r3, [pc, #280]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80035b6:	4b45      	ldr	r3, [pc, #276]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d07b      	beq.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	0c9b      	lsrs	r3, r3, #18
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	4a41      	ldr	r2, [pc, #260]	@ (80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80035cc:	5cd3      	ldrb	r3, [r2, r3]
 80035ce:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d015      	beq.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035da:	4b3c      	ldr	r3, [pc, #240]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	0c5b      	lsrs	r3, r3, #17
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	4a3b      	ldr	r2, [pc, #236]	@ (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80035e6:	5cd3      	ldrb	r3, [r2, r3]
 80035e8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80035f4:	4a38      	ldr	r2, [pc, #224]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	e004      	b.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4a34      	ldr	r2, [pc, #208]	@ (80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003610:	4b2e      	ldr	r3, [pc, #184]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003618:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800361c:	d102      	bne.n	8003624 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	61bb      	str	r3, [r7, #24]
      break;
 8003622:	e04a      	b.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4a2d      	ldr	r2, [pc, #180]	@ (80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	085b      	lsrs	r3, r3, #1
 8003630:	61bb      	str	r3, [r7, #24]
      break;
 8003632:	e042      	b.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003634:	4b25      	ldr	r3, [pc, #148]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003644:	d108      	bne.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003650:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	e01f      	b.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800365e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003662:	d109      	bne.n	8003678 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003664:	4b19      	ldr	r3, [pc, #100]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003670:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	e00f      	b.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003682:	d11c      	bne.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003684:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d016      	beq.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003690:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003694:	61bb      	str	r3, [r7, #24]
      break;
 8003696:	e012      	b.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003698:	e011      	b.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800369a:	f7ff fe85 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 800369e:	4602      	mov	r2, r0
 80036a0:	4b0a      	ldr	r3, [pc, #40]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	0b9b      	lsrs	r3, r3, #14
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	3301      	adds	r3, #1
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	61bb      	str	r3, [r7, #24]
      break;
 80036b4:	e004      	b.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036b6:	bf00      	nop
 80036b8:	e002      	b.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036be:	bf00      	nop
    }
  }
  return (frequency);
 80036c0:	69bb      	ldr	r3, [r7, #24]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	08004c30 	.word	0x08004c30
 80036d4:	08004c40 	.word	0x08004c40
 80036d8:	007a1200 	.word	0x007a1200
 80036dc:	003d0900 	.word	0x003d0900
 80036e0:	aaaaaaab 	.word	0xaaaaaaab

080036e4 <siprintf>:
 80036e4:	b40e      	push	{r1, r2, r3}
 80036e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80036ea:	b500      	push	{lr}
 80036ec:	b09c      	sub	sp, #112	@ 0x70
 80036ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80036f0:	9002      	str	r0, [sp, #8]
 80036f2:	9006      	str	r0, [sp, #24]
 80036f4:	9107      	str	r1, [sp, #28]
 80036f6:	9104      	str	r1, [sp, #16]
 80036f8:	4808      	ldr	r0, [pc, #32]	@ (800371c <siprintf+0x38>)
 80036fa:	4909      	ldr	r1, [pc, #36]	@ (8003720 <siprintf+0x3c>)
 80036fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003700:	9105      	str	r1, [sp, #20]
 8003702:	6800      	ldr	r0, [r0, #0]
 8003704:	a902      	add	r1, sp, #8
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	f000 f992 	bl	8003a30 <_svfiprintf_r>
 800370c:	2200      	movs	r2, #0
 800370e:	9b02      	ldr	r3, [sp, #8]
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	b01c      	add	sp, #112	@ 0x70
 8003714:	f85d eb04 	ldr.w	lr, [sp], #4
 8003718:	b003      	add	sp, #12
 800371a:	4770      	bx	lr
 800371c:	2000000c 	.word	0x2000000c
 8003720:	ffff0208 	.word	0xffff0208

08003724 <memset>:
 8003724:	4603      	mov	r3, r0
 8003726:	4402      	add	r2, r0
 8003728:	4293      	cmp	r3, r2
 800372a:	d100      	bne.n	800372e <memset+0xa>
 800372c:	4770      	bx	lr
 800372e:	f803 1b01 	strb.w	r1, [r3], #1
 8003732:	e7f9      	b.n	8003728 <memset+0x4>

08003734 <__errno>:
 8003734:	4b01      	ldr	r3, [pc, #4]	@ (800373c <__errno+0x8>)
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	2000000c 	.word	0x2000000c

08003740 <__libc_init_array>:
 8003740:	b570      	push	{r4, r5, r6, lr}
 8003742:	2600      	movs	r6, #0
 8003744:	4d0c      	ldr	r5, [pc, #48]	@ (8003778 <__libc_init_array+0x38>)
 8003746:	4c0d      	ldr	r4, [pc, #52]	@ (800377c <__libc_init_array+0x3c>)
 8003748:	1b64      	subs	r4, r4, r5
 800374a:	10a4      	asrs	r4, r4, #2
 800374c:	42a6      	cmp	r6, r4
 800374e:	d109      	bne.n	8003764 <__libc_init_array+0x24>
 8003750:	f000 fc78 	bl	8004044 <_init>
 8003754:	2600      	movs	r6, #0
 8003756:	4d0a      	ldr	r5, [pc, #40]	@ (8003780 <__libc_init_array+0x40>)
 8003758:	4c0a      	ldr	r4, [pc, #40]	@ (8003784 <__libc_init_array+0x44>)
 800375a:	1b64      	subs	r4, r4, r5
 800375c:	10a4      	asrs	r4, r4, #2
 800375e:	42a6      	cmp	r6, r4
 8003760:	d105      	bne.n	800376e <__libc_init_array+0x2e>
 8003762:	bd70      	pop	{r4, r5, r6, pc}
 8003764:	f855 3b04 	ldr.w	r3, [r5], #4
 8003768:	4798      	blx	r3
 800376a:	3601      	adds	r6, #1
 800376c:	e7ee      	b.n	800374c <__libc_init_array+0xc>
 800376e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003772:	4798      	blx	r3
 8003774:	3601      	adds	r6, #1
 8003776:	e7f2      	b.n	800375e <__libc_init_array+0x1e>
 8003778:	08004c80 	.word	0x08004c80
 800377c:	08004c80 	.word	0x08004c80
 8003780:	08004c80 	.word	0x08004c80
 8003784:	08004c84 	.word	0x08004c84

08003788 <__retarget_lock_acquire_recursive>:
 8003788:	4770      	bx	lr

0800378a <__retarget_lock_release_recursive>:
 800378a:	4770      	bx	lr

0800378c <_free_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	4605      	mov	r5, r0
 8003790:	2900      	cmp	r1, #0
 8003792:	d040      	beq.n	8003816 <_free_r+0x8a>
 8003794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003798:	1f0c      	subs	r4, r1, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	bfb8      	it	lt
 800379e:	18e4      	addlt	r4, r4, r3
 80037a0:	f000 f8de 	bl	8003960 <__malloc_lock>
 80037a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003818 <_free_r+0x8c>)
 80037a6:	6813      	ldr	r3, [r2, #0]
 80037a8:	b933      	cbnz	r3, 80037b8 <_free_r+0x2c>
 80037aa:	6063      	str	r3, [r4, #4]
 80037ac:	6014      	str	r4, [r2, #0]
 80037ae:	4628      	mov	r0, r5
 80037b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037b4:	f000 b8da 	b.w	800396c <__malloc_unlock>
 80037b8:	42a3      	cmp	r3, r4
 80037ba:	d908      	bls.n	80037ce <_free_r+0x42>
 80037bc:	6820      	ldr	r0, [r4, #0]
 80037be:	1821      	adds	r1, r4, r0
 80037c0:	428b      	cmp	r3, r1
 80037c2:	bf01      	itttt	eq
 80037c4:	6819      	ldreq	r1, [r3, #0]
 80037c6:	685b      	ldreq	r3, [r3, #4]
 80037c8:	1809      	addeq	r1, r1, r0
 80037ca:	6021      	streq	r1, [r4, #0]
 80037cc:	e7ed      	b.n	80037aa <_free_r+0x1e>
 80037ce:	461a      	mov	r2, r3
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	b10b      	cbz	r3, 80037d8 <_free_r+0x4c>
 80037d4:	42a3      	cmp	r3, r4
 80037d6:	d9fa      	bls.n	80037ce <_free_r+0x42>
 80037d8:	6811      	ldr	r1, [r2, #0]
 80037da:	1850      	adds	r0, r2, r1
 80037dc:	42a0      	cmp	r0, r4
 80037de:	d10b      	bne.n	80037f8 <_free_r+0x6c>
 80037e0:	6820      	ldr	r0, [r4, #0]
 80037e2:	4401      	add	r1, r0
 80037e4:	1850      	adds	r0, r2, r1
 80037e6:	4283      	cmp	r3, r0
 80037e8:	6011      	str	r1, [r2, #0]
 80037ea:	d1e0      	bne.n	80037ae <_free_r+0x22>
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4408      	add	r0, r1
 80037f2:	6010      	str	r0, [r2, #0]
 80037f4:	6053      	str	r3, [r2, #4]
 80037f6:	e7da      	b.n	80037ae <_free_r+0x22>
 80037f8:	d902      	bls.n	8003800 <_free_r+0x74>
 80037fa:	230c      	movs	r3, #12
 80037fc:	602b      	str	r3, [r5, #0]
 80037fe:	e7d6      	b.n	80037ae <_free_r+0x22>
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	1821      	adds	r1, r4, r0
 8003804:	428b      	cmp	r3, r1
 8003806:	bf01      	itttt	eq
 8003808:	6819      	ldreq	r1, [r3, #0]
 800380a:	685b      	ldreq	r3, [r3, #4]
 800380c:	1809      	addeq	r1, r1, r0
 800380e:	6021      	streq	r1, [r4, #0]
 8003810:	6063      	str	r3, [r4, #4]
 8003812:	6054      	str	r4, [r2, #4]
 8003814:	e7cb      	b.n	80037ae <_free_r+0x22>
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	20000668 	.word	0x20000668

0800381c <sbrk_aligned>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	4e0f      	ldr	r6, [pc, #60]	@ (800385c <sbrk_aligned+0x40>)
 8003820:	460c      	mov	r4, r1
 8003822:	6831      	ldr	r1, [r6, #0]
 8003824:	4605      	mov	r5, r0
 8003826:	b911      	cbnz	r1, 800382e <sbrk_aligned+0x12>
 8003828:	f000 fbaa 	bl	8003f80 <_sbrk_r>
 800382c:	6030      	str	r0, [r6, #0]
 800382e:	4621      	mov	r1, r4
 8003830:	4628      	mov	r0, r5
 8003832:	f000 fba5 	bl	8003f80 <_sbrk_r>
 8003836:	1c43      	adds	r3, r0, #1
 8003838:	d103      	bne.n	8003842 <sbrk_aligned+0x26>
 800383a:	f04f 34ff 	mov.w	r4, #4294967295
 800383e:	4620      	mov	r0, r4
 8003840:	bd70      	pop	{r4, r5, r6, pc}
 8003842:	1cc4      	adds	r4, r0, #3
 8003844:	f024 0403 	bic.w	r4, r4, #3
 8003848:	42a0      	cmp	r0, r4
 800384a:	d0f8      	beq.n	800383e <sbrk_aligned+0x22>
 800384c:	1a21      	subs	r1, r4, r0
 800384e:	4628      	mov	r0, r5
 8003850:	f000 fb96 	bl	8003f80 <_sbrk_r>
 8003854:	3001      	adds	r0, #1
 8003856:	d1f2      	bne.n	800383e <sbrk_aligned+0x22>
 8003858:	e7ef      	b.n	800383a <sbrk_aligned+0x1e>
 800385a:	bf00      	nop
 800385c:	20000664 	.word	0x20000664

08003860 <_malloc_r>:
 8003860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003864:	1ccd      	adds	r5, r1, #3
 8003866:	f025 0503 	bic.w	r5, r5, #3
 800386a:	3508      	adds	r5, #8
 800386c:	2d0c      	cmp	r5, #12
 800386e:	bf38      	it	cc
 8003870:	250c      	movcc	r5, #12
 8003872:	2d00      	cmp	r5, #0
 8003874:	4606      	mov	r6, r0
 8003876:	db01      	blt.n	800387c <_malloc_r+0x1c>
 8003878:	42a9      	cmp	r1, r5
 800387a:	d904      	bls.n	8003886 <_malloc_r+0x26>
 800387c:	230c      	movs	r3, #12
 800387e:	6033      	str	r3, [r6, #0]
 8003880:	2000      	movs	r0, #0
 8003882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003886:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800395c <_malloc_r+0xfc>
 800388a:	f000 f869 	bl	8003960 <__malloc_lock>
 800388e:	f8d8 3000 	ldr.w	r3, [r8]
 8003892:	461c      	mov	r4, r3
 8003894:	bb44      	cbnz	r4, 80038e8 <_malloc_r+0x88>
 8003896:	4629      	mov	r1, r5
 8003898:	4630      	mov	r0, r6
 800389a:	f7ff ffbf 	bl	800381c <sbrk_aligned>
 800389e:	1c43      	adds	r3, r0, #1
 80038a0:	4604      	mov	r4, r0
 80038a2:	d158      	bne.n	8003956 <_malloc_r+0xf6>
 80038a4:	f8d8 4000 	ldr.w	r4, [r8]
 80038a8:	4627      	mov	r7, r4
 80038aa:	2f00      	cmp	r7, #0
 80038ac:	d143      	bne.n	8003936 <_malloc_r+0xd6>
 80038ae:	2c00      	cmp	r4, #0
 80038b0:	d04b      	beq.n	800394a <_malloc_r+0xea>
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	4639      	mov	r1, r7
 80038b6:	4630      	mov	r0, r6
 80038b8:	eb04 0903 	add.w	r9, r4, r3
 80038bc:	f000 fb60 	bl	8003f80 <_sbrk_r>
 80038c0:	4581      	cmp	r9, r0
 80038c2:	d142      	bne.n	800394a <_malloc_r+0xea>
 80038c4:	6821      	ldr	r1, [r4, #0]
 80038c6:	4630      	mov	r0, r6
 80038c8:	1a6d      	subs	r5, r5, r1
 80038ca:	4629      	mov	r1, r5
 80038cc:	f7ff ffa6 	bl	800381c <sbrk_aligned>
 80038d0:	3001      	adds	r0, #1
 80038d2:	d03a      	beq.n	800394a <_malloc_r+0xea>
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	442b      	add	r3, r5
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	f8d8 3000 	ldr.w	r3, [r8]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	bb62      	cbnz	r2, 800393c <_malloc_r+0xdc>
 80038e2:	f8c8 7000 	str.w	r7, [r8]
 80038e6:	e00f      	b.n	8003908 <_malloc_r+0xa8>
 80038e8:	6822      	ldr	r2, [r4, #0]
 80038ea:	1b52      	subs	r2, r2, r5
 80038ec:	d420      	bmi.n	8003930 <_malloc_r+0xd0>
 80038ee:	2a0b      	cmp	r2, #11
 80038f0:	d917      	bls.n	8003922 <_malloc_r+0xc2>
 80038f2:	1961      	adds	r1, r4, r5
 80038f4:	42a3      	cmp	r3, r4
 80038f6:	6025      	str	r5, [r4, #0]
 80038f8:	bf18      	it	ne
 80038fa:	6059      	strne	r1, [r3, #4]
 80038fc:	6863      	ldr	r3, [r4, #4]
 80038fe:	bf08      	it	eq
 8003900:	f8c8 1000 	streq.w	r1, [r8]
 8003904:	5162      	str	r2, [r4, r5]
 8003906:	604b      	str	r3, [r1, #4]
 8003908:	4630      	mov	r0, r6
 800390a:	f000 f82f 	bl	800396c <__malloc_unlock>
 800390e:	f104 000b 	add.w	r0, r4, #11
 8003912:	1d23      	adds	r3, r4, #4
 8003914:	f020 0007 	bic.w	r0, r0, #7
 8003918:	1ac2      	subs	r2, r0, r3
 800391a:	bf1c      	itt	ne
 800391c:	1a1b      	subne	r3, r3, r0
 800391e:	50a3      	strne	r3, [r4, r2]
 8003920:	e7af      	b.n	8003882 <_malloc_r+0x22>
 8003922:	6862      	ldr	r2, [r4, #4]
 8003924:	42a3      	cmp	r3, r4
 8003926:	bf0c      	ite	eq
 8003928:	f8c8 2000 	streq.w	r2, [r8]
 800392c:	605a      	strne	r2, [r3, #4]
 800392e:	e7eb      	b.n	8003908 <_malloc_r+0xa8>
 8003930:	4623      	mov	r3, r4
 8003932:	6864      	ldr	r4, [r4, #4]
 8003934:	e7ae      	b.n	8003894 <_malloc_r+0x34>
 8003936:	463c      	mov	r4, r7
 8003938:	687f      	ldr	r7, [r7, #4]
 800393a:	e7b6      	b.n	80038aa <_malloc_r+0x4a>
 800393c:	461a      	mov	r2, r3
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	42a3      	cmp	r3, r4
 8003942:	d1fb      	bne.n	800393c <_malloc_r+0xdc>
 8003944:	2300      	movs	r3, #0
 8003946:	6053      	str	r3, [r2, #4]
 8003948:	e7de      	b.n	8003908 <_malloc_r+0xa8>
 800394a:	230c      	movs	r3, #12
 800394c:	4630      	mov	r0, r6
 800394e:	6033      	str	r3, [r6, #0]
 8003950:	f000 f80c 	bl	800396c <__malloc_unlock>
 8003954:	e794      	b.n	8003880 <_malloc_r+0x20>
 8003956:	6005      	str	r5, [r0, #0]
 8003958:	e7d6      	b.n	8003908 <_malloc_r+0xa8>
 800395a:	bf00      	nop
 800395c:	20000668 	.word	0x20000668

08003960 <__malloc_lock>:
 8003960:	4801      	ldr	r0, [pc, #4]	@ (8003968 <__malloc_lock+0x8>)
 8003962:	f7ff bf11 	b.w	8003788 <__retarget_lock_acquire_recursive>
 8003966:	bf00      	nop
 8003968:	20000660 	.word	0x20000660

0800396c <__malloc_unlock>:
 800396c:	4801      	ldr	r0, [pc, #4]	@ (8003974 <__malloc_unlock+0x8>)
 800396e:	f7ff bf0c 	b.w	800378a <__retarget_lock_release_recursive>
 8003972:	bf00      	nop
 8003974:	20000660 	.word	0x20000660

08003978 <__ssputs_r>:
 8003978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	461f      	mov	r7, r3
 800397e:	688e      	ldr	r6, [r1, #8]
 8003980:	4682      	mov	sl, r0
 8003982:	42be      	cmp	r6, r7
 8003984:	460c      	mov	r4, r1
 8003986:	4690      	mov	r8, r2
 8003988:	680b      	ldr	r3, [r1, #0]
 800398a:	d82d      	bhi.n	80039e8 <__ssputs_r+0x70>
 800398c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003990:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003994:	d026      	beq.n	80039e4 <__ssputs_r+0x6c>
 8003996:	6965      	ldr	r5, [r4, #20]
 8003998:	6909      	ldr	r1, [r1, #16]
 800399a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800399e:	eba3 0901 	sub.w	r9, r3, r1
 80039a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039a6:	1c7b      	adds	r3, r7, #1
 80039a8:	444b      	add	r3, r9
 80039aa:	106d      	asrs	r5, r5, #1
 80039ac:	429d      	cmp	r5, r3
 80039ae:	bf38      	it	cc
 80039b0:	461d      	movcc	r5, r3
 80039b2:	0553      	lsls	r3, r2, #21
 80039b4:	d527      	bpl.n	8003a06 <__ssputs_r+0x8e>
 80039b6:	4629      	mov	r1, r5
 80039b8:	f7ff ff52 	bl	8003860 <_malloc_r>
 80039bc:	4606      	mov	r6, r0
 80039be:	b360      	cbz	r0, 8003a1a <__ssputs_r+0xa2>
 80039c0:	464a      	mov	r2, r9
 80039c2:	6921      	ldr	r1, [r4, #16]
 80039c4:	f000 fafa 	bl	8003fbc <memcpy>
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d2:	81a3      	strh	r3, [r4, #12]
 80039d4:	6126      	str	r6, [r4, #16]
 80039d6:	444e      	add	r6, r9
 80039d8:	6026      	str	r6, [r4, #0]
 80039da:	463e      	mov	r6, r7
 80039dc:	6165      	str	r5, [r4, #20]
 80039de:	eba5 0509 	sub.w	r5, r5, r9
 80039e2:	60a5      	str	r5, [r4, #8]
 80039e4:	42be      	cmp	r6, r7
 80039e6:	d900      	bls.n	80039ea <__ssputs_r+0x72>
 80039e8:	463e      	mov	r6, r7
 80039ea:	4632      	mov	r2, r6
 80039ec:	4641      	mov	r1, r8
 80039ee:	6820      	ldr	r0, [r4, #0]
 80039f0:	f000 faac 	bl	8003f4c <memmove>
 80039f4:	2000      	movs	r0, #0
 80039f6:	68a3      	ldr	r3, [r4, #8]
 80039f8:	1b9b      	subs	r3, r3, r6
 80039fa:	60a3      	str	r3, [r4, #8]
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	4433      	add	r3, r6
 8003a00:	6023      	str	r3, [r4, #0]
 8003a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a06:	462a      	mov	r2, r5
 8003a08:	f000 fae6 	bl	8003fd8 <_realloc_r>
 8003a0c:	4606      	mov	r6, r0
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d1e0      	bne.n	80039d4 <__ssputs_r+0x5c>
 8003a12:	4650      	mov	r0, sl
 8003a14:	6921      	ldr	r1, [r4, #16]
 8003a16:	f7ff feb9 	bl	800378c <_free_r>
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	f8ca 3000 	str.w	r3, [sl]
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	f04f 30ff 	mov.w	r0, #4294967295
 8003a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a2a:	81a3      	strh	r3, [r4, #12]
 8003a2c:	e7e9      	b.n	8003a02 <__ssputs_r+0x8a>
	...

08003a30 <_svfiprintf_r>:
 8003a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a34:	4698      	mov	r8, r3
 8003a36:	898b      	ldrh	r3, [r1, #12]
 8003a38:	4607      	mov	r7, r0
 8003a3a:	061b      	lsls	r3, r3, #24
 8003a3c:	460d      	mov	r5, r1
 8003a3e:	4614      	mov	r4, r2
 8003a40:	b09d      	sub	sp, #116	@ 0x74
 8003a42:	d510      	bpl.n	8003a66 <_svfiprintf_r+0x36>
 8003a44:	690b      	ldr	r3, [r1, #16]
 8003a46:	b973      	cbnz	r3, 8003a66 <_svfiprintf_r+0x36>
 8003a48:	2140      	movs	r1, #64	@ 0x40
 8003a4a:	f7ff ff09 	bl	8003860 <_malloc_r>
 8003a4e:	6028      	str	r0, [r5, #0]
 8003a50:	6128      	str	r0, [r5, #16]
 8003a52:	b930      	cbnz	r0, 8003a62 <_svfiprintf_r+0x32>
 8003a54:	230c      	movs	r3, #12
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5c:	b01d      	add	sp, #116	@ 0x74
 8003a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a62:	2340      	movs	r3, #64	@ 0x40
 8003a64:	616b      	str	r3, [r5, #20]
 8003a66:	2300      	movs	r3, #0
 8003a68:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a70:	2330      	movs	r3, #48	@ 0x30
 8003a72:	f04f 0901 	mov.w	r9, #1
 8003a76:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a7a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003c14 <_svfiprintf_r+0x1e4>
 8003a7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a82:	4623      	mov	r3, r4
 8003a84:	469a      	mov	sl, r3
 8003a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a8a:	b10a      	cbz	r2, 8003a90 <_svfiprintf_r+0x60>
 8003a8c:	2a25      	cmp	r2, #37	@ 0x25
 8003a8e:	d1f9      	bne.n	8003a84 <_svfiprintf_r+0x54>
 8003a90:	ebba 0b04 	subs.w	fp, sl, r4
 8003a94:	d00b      	beq.n	8003aae <_svfiprintf_r+0x7e>
 8003a96:	465b      	mov	r3, fp
 8003a98:	4622      	mov	r2, r4
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	f7ff ff6b 	bl	8003978 <__ssputs_r>
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	f000 80a7 	beq.w	8003bf6 <_svfiprintf_r+0x1c6>
 8003aa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003aaa:	445a      	add	r2, fp
 8003aac:	9209      	str	r2, [sp, #36]	@ 0x24
 8003aae:	f89a 3000 	ldrb.w	r3, [sl]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 809f 	beq.w	8003bf6 <_svfiprintf_r+0x1c6>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f04f 32ff 	mov.w	r2, #4294967295
 8003abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ac2:	f10a 0a01 	add.w	sl, sl, #1
 8003ac6:	9304      	str	r3, [sp, #16]
 8003ac8:	9307      	str	r3, [sp, #28]
 8003aca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ace:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ad0:	4654      	mov	r4, sl
 8003ad2:	2205      	movs	r2, #5
 8003ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ad8:	484e      	ldr	r0, [pc, #312]	@ (8003c14 <_svfiprintf_r+0x1e4>)
 8003ada:	f000 fa61 	bl	8003fa0 <memchr>
 8003ade:	9a04      	ldr	r2, [sp, #16]
 8003ae0:	b9d8      	cbnz	r0, 8003b1a <_svfiprintf_r+0xea>
 8003ae2:	06d0      	lsls	r0, r2, #27
 8003ae4:	bf44      	itt	mi
 8003ae6:	2320      	movmi	r3, #32
 8003ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003aec:	0711      	lsls	r1, r2, #28
 8003aee:	bf44      	itt	mi
 8003af0:	232b      	movmi	r3, #43	@ 0x2b
 8003af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003af6:	f89a 3000 	ldrb.w	r3, [sl]
 8003afa:	2b2a      	cmp	r3, #42	@ 0x2a
 8003afc:	d015      	beq.n	8003b2a <_svfiprintf_r+0xfa>
 8003afe:	4654      	mov	r4, sl
 8003b00:	2000      	movs	r0, #0
 8003b02:	f04f 0c0a 	mov.w	ip, #10
 8003b06:	9a07      	ldr	r2, [sp, #28]
 8003b08:	4621      	mov	r1, r4
 8003b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b0e:	3b30      	subs	r3, #48	@ 0x30
 8003b10:	2b09      	cmp	r3, #9
 8003b12:	d94b      	bls.n	8003bac <_svfiprintf_r+0x17c>
 8003b14:	b1b0      	cbz	r0, 8003b44 <_svfiprintf_r+0x114>
 8003b16:	9207      	str	r2, [sp, #28]
 8003b18:	e014      	b.n	8003b44 <_svfiprintf_r+0x114>
 8003b1a:	eba0 0308 	sub.w	r3, r0, r8
 8003b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b22:	4313      	orrs	r3, r2
 8003b24:	46a2      	mov	sl, r4
 8003b26:	9304      	str	r3, [sp, #16]
 8003b28:	e7d2      	b.n	8003ad0 <_svfiprintf_r+0xa0>
 8003b2a:	9b03      	ldr	r3, [sp, #12]
 8003b2c:	1d19      	adds	r1, r3, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	9103      	str	r1, [sp, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bfbb      	ittet	lt
 8003b36:	425b      	neglt	r3, r3
 8003b38:	f042 0202 	orrlt.w	r2, r2, #2
 8003b3c:	9307      	strge	r3, [sp, #28]
 8003b3e:	9307      	strlt	r3, [sp, #28]
 8003b40:	bfb8      	it	lt
 8003b42:	9204      	strlt	r2, [sp, #16]
 8003b44:	7823      	ldrb	r3, [r4, #0]
 8003b46:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b48:	d10a      	bne.n	8003b60 <_svfiprintf_r+0x130>
 8003b4a:	7863      	ldrb	r3, [r4, #1]
 8003b4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b4e:	d132      	bne.n	8003bb6 <_svfiprintf_r+0x186>
 8003b50:	9b03      	ldr	r3, [sp, #12]
 8003b52:	3402      	adds	r4, #2
 8003b54:	1d1a      	adds	r2, r3, #4
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	9203      	str	r2, [sp, #12]
 8003b5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b5e:	9305      	str	r3, [sp, #20]
 8003b60:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003c18 <_svfiprintf_r+0x1e8>
 8003b64:	2203      	movs	r2, #3
 8003b66:	4650      	mov	r0, sl
 8003b68:	7821      	ldrb	r1, [r4, #0]
 8003b6a:	f000 fa19 	bl	8003fa0 <memchr>
 8003b6e:	b138      	cbz	r0, 8003b80 <_svfiprintf_r+0x150>
 8003b70:	2240      	movs	r2, #64	@ 0x40
 8003b72:	9b04      	ldr	r3, [sp, #16]
 8003b74:	eba0 000a 	sub.w	r0, r0, sl
 8003b78:	4082      	lsls	r2, r0
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	3401      	adds	r4, #1
 8003b7e:	9304      	str	r3, [sp, #16]
 8003b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b84:	2206      	movs	r2, #6
 8003b86:	4825      	ldr	r0, [pc, #148]	@ (8003c1c <_svfiprintf_r+0x1ec>)
 8003b88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b8c:	f000 fa08 	bl	8003fa0 <memchr>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d036      	beq.n	8003c02 <_svfiprintf_r+0x1d2>
 8003b94:	4b22      	ldr	r3, [pc, #136]	@ (8003c20 <_svfiprintf_r+0x1f0>)
 8003b96:	bb1b      	cbnz	r3, 8003be0 <_svfiprintf_r+0x1b0>
 8003b98:	9b03      	ldr	r3, [sp, #12]
 8003b9a:	3307      	adds	r3, #7
 8003b9c:	f023 0307 	bic.w	r3, r3, #7
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	9303      	str	r3, [sp, #12]
 8003ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ba6:	4433      	add	r3, r6
 8003ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003baa:	e76a      	b.n	8003a82 <_svfiprintf_r+0x52>
 8003bac:	460c      	mov	r4, r1
 8003bae:	2001      	movs	r0, #1
 8003bb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bb4:	e7a8      	b.n	8003b08 <_svfiprintf_r+0xd8>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f04f 0c0a 	mov.w	ip, #10
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	3401      	adds	r4, #1
 8003bc0:	9305      	str	r3, [sp, #20]
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bc8:	3a30      	subs	r2, #48	@ 0x30
 8003bca:	2a09      	cmp	r2, #9
 8003bcc:	d903      	bls.n	8003bd6 <_svfiprintf_r+0x1a6>
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0c6      	beq.n	8003b60 <_svfiprintf_r+0x130>
 8003bd2:	9105      	str	r1, [sp, #20]
 8003bd4:	e7c4      	b.n	8003b60 <_svfiprintf_r+0x130>
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	2301      	movs	r3, #1
 8003bda:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bde:	e7f0      	b.n	8003bc2 <_svfiprintf_r+0x192>
 8003be0:	ab03      	add	r3, sp, #12
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	462a      	mov	r2, r5
 8003be6:	4638      	mov	r0, r7
 8003be8:	4b0e      	ldr	r3, [pc, #56]	@ (8003c24 <_svfiprintf_r+0x1f4>)
 8003bea:	a904      	add	r1, sp, #16
 8003bec:	f3af 8000 	nop.w
 8003bf0:	1c42      	adds	r2, r0, #1
 8003bf2:	4606      	mov	r6, r0
 8003bf4:	d1d6      	bne.n	8003ba4 <_svfiprintf_r+0x174>
 8003bf6:	89ab      	ldrh	r3, [r5, #12]
 8003bf8:	065b      	lsls	r3, r3, #25
 8003bfa:	f53f af2d 	bmi.w	8003a58 <_svfiprintf_r+0x28>
 8003bfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c00:	e72c      	b.n	8003a5c <_svfiprintf_r+0x2c>
 8003c02:	ab03      	add	r3, sp, #12
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	462a      	mov	r2, r5
 8003c08:	4638      	mov	r0, r7
 8003c0a:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <_svfiprintf_r+0x1f4>)
 8003c0c:	a904      	add	r1, sp, #16
 8003c0e:	f000 f87d 	bl	8003d0c <_printf_i>
 8003c12:	e7ed      	b.n	8003bf0 <_svfiprintf_r+0x1c0>
 8003c14:	08004c42 	.word	0x08004c42
 8003c18:	08004c48 	.word	0x08004c48
 8003c1c:	08004c4c 	.word	0x08004c4c
 8003c20:	00000000 	.word	0x00000000
 8003c24:	08003979 	.word	0x08003979

08003c28 <_printf_common>:
 8003c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c2c:	4616      	mov	r6, r2
 8003c2e:	4698      	mov	r8, r3
 8003c30:	688a      	ldr	r2, [r1, #8]
 8003c32:	690b      	ldr	r3, [r1, #16]
 8003c34:	4607      	mov	r7, r0
 8003c36:	4293      	cmp	r3, r2
 8003c38:	bfb8      	it	lt
 8003c3a:	4613      	movlt	r3, r2
 8003c3c:	6033      	str	r3, [r6, #0]
 8003c3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c42:	460c      	mov	r4, r1
 8003c44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c48:	b10a      	cbz	r2, 8003c4e <_printf_common+0x26>
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	6033      	str	r3, [r6, #0]
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	0699      	lsls	r1, r3, #26
 8003c52:	bf42      	ittt	mi
 8003c54:	6833      	ldrmi	r3, [r6, #0]
 8003c56:	3302      	addmi	r3, #2
 8003c58:	6033      	strmi	r3, [r6, #0]
 8003c5a:	6825      	ldr	r5, [r4, #0]
 8003c5c:	f015 0506 	ands.w	r5, r5, #6
 8003c60:	d106      	bne.n	8003c70 <_printf_common+0x48>
 8003c62:	f104 0a19 	add.w	sl, r4, #25
 8003c66:	68e3      	ldr	r3, [r4, #12]
 8003c68:	6832      	ldr	r2, [r6, #0]
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	42ab      	cmp	r3, r5
 8003c6e:	dc2b      	bgt.n	8003cc8 <_printf_common+0xa0>
 8003c70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c74:	6822      	ldr	r2, [r4, #0]
 8003c76:	3b00      	subs	r3, #0
 8003c78:	bf18      	it	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	0692      	lsls	r2, r2, #26
 8003c7e:	d430      	bmi.n	8003ce2 <_printf_common+0xba>
 8003c80:	4641      	mov	r1, r8
 8003c82:	4638      	mov	r0, r7
 8003c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c88:	47c8      	blx	r9
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d023      	beq.n	8003cd6 <_printf_common+0xae>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	6922      	ldr	r2, [r4, #16]
 8003c92:	f003 0306 	and.w	r3, r3, #6
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	bf14      	ite	ne
 8003c9a:	2500      	movne	r5, #0
 8003c9c:	6833      	ldreq	r3, [r6, #0]
 8003c9e:	f04f 0600 	mov.w	r6, #0
 8003ca2:	bf08      	it	eq
 8003ca4:	68e5      	ldreq	r5, [r4, #12]
 8003ca6:	f104 041a 	add.w	r4, r4, #26
 8003caa:	bf08      	it	eq
 8003cac:	1aed      	subeq	r5, r5, r3
 8003cae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003cb2:	bf08      	it	eq
 8003cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	bfc4      	itt	gt
 8003cbc:	1a9b      	subgt	r3, r3, r2
 8003cbe:	18ed      	addgt	r5, r5, r3
 8003cc0:	42b5      	cmp	r5, r6
 8003cc2:	d11a      	bne.n	8003cfa <_printf_common+0xd2>
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	e008      	b.n	8003cda <_printf_common+0xb2>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	4652      	mov	r2, sl
 8003ccc:	4641      	mov	r1, r8
 8003cce:	4638      	mov	r0, r7
 8003cd0:	47c8      	blx	r9
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	d103      	bne.n	8003cde <_printf_common+0xb6>
 8003cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cde:	3501      	adds	r5, #1
 8003ce0:	e7c1      	b.n	8003c66 <_printf_common+0x3e>
 8003ce2:	2030      	movs	r0, #48	@ 0x30
 8003ce4:	18e1      	adds	r1, r4, r3
 8003ce6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cf0:	4422      	add	r2, r4
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cf8:	e7c2      	b.n	8003c80 <_printf_common+0x58>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	4641      	mov	r1, r8
 8003d00:	4638      	mov	r0, r7
 8003d02:	47c8      	blx	r9
 8003d04:	3001      	adds	r0, #1
 8003d06:	d0e6      	beq.n	8003cd6 <_printf_common+0xae>
 8003d08:	3601      	adds	r6, #1
 8003d0a:	e7d9      	b.n	8003cc0 <_printf_common+0x98>

08003d0c <_printf_i>:
 8003d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d10:	7e0f      	ldrb	r7, [r1, #24]
 8003d12:	4691      	mov	r9, r2
 8003d14:	2f78      	cmp	r7, #120	@ 0x78
 8003d16:	4680      	mov	r8, r0
 8003d18:	460c      	mov	r4, r1
 8003d1a:	469a      	mov	sl, r3
 8003d1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d22:	d807      	bhi.n	8003d34 <_printf_i+0x28>
 8003d24:	2f62      	cmp	r7, #98	@ 0x62
 8003d26:	d80a      	bhi.n	8003d3e <_printf_i+0x32>
 8003d28:	2f00      	cmp	r7, #0
 8003d2a:	f000 80d3 	beq.w	8003ed4 <_printf_i+0x1c8>
 8003d2e:	2f58      	cmp	r7, #88	@ 0x58
 8003d30:	f000 80ba 	beq.w	8003ea8 <_printf_i+0x19c>
 8003d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d3c:	e03a      	b.n	8003db4 <_printf_i+0xa8>
 8003d3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d42:	2b15      	cmp	r3, #21
 8003d44:	d8f6      	bhi.n	8003d34 <_printf_i+0x28>
 8003d46:	a101      	add	r1, pc, #4	@ (adr r1, 8003d4c <_printf_i+0x40>)
 8003d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d4c:	08003da5 	.word	0x08003da5
 8003d50:	08003db9 	.word	0x08003db9
 8003d54:	08003d35 	.word	0x08003d35
 8003d58:	08003d35 	.word	0x08003d35
 8003d5c:	08003d35 	.word	0x08003d35
 8003d60:	08003d35 	.word	0x08003d35
 8003d64:	08003db9 	.word	0x08003db9
 8003d68:	08003d35 	.word	0x08003d35
 8003d6c:	08003d35 	.word	0x08003d35
 8003d70:	08003d35 	.word	0x08003d35
 8003d74:	08003d35 	.word	0x08003d35
 8003d78:	08003ebb 	.word	0x08003ebb
 8003d7c:	08003de3 	.word	0x08003de3
 8003d80:	08003e75 	.word	0x08003e75
 8003d84:	08003d35 	.word	0x08003d35
 8003d88:	08003d35 	.word	0x08003d35
 8003d8c:	08003edd 	.word	0x08003edd
 8003d90:	08003d35 	.word	0x08003d35
 8003d94:	08003de3 	.word	0x08003de3
 8003d98:	08003d35 	.word	0x08003d35
 8003d9c:	08003d35 	.word	0x08003d35
 8003da0:	08003e7d 	.word	0x08003e7d
 8003da4:	6833      	ldr	r3, [r6, #0]
 8003da6:	1d1a      	adds	r2, r3, #4
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6032      	str	r2, [r6, #0]
 8003dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003db0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003db4:	2301      	movs	r3, #1
 8003db6:	e09e      	b.n	8003ef6 <_printf_i+0x1ea>
 8003db8:	6833      	ldr	r3, [r6, #0]
 8003dba:	6820      	ldr	r0, [r4, #0]
 8003dbc:	1d19      	adds	r1, r3, #4
 8003dbe:	6031      	str	r1, [r6, #0]
 8003dc0:	0606      	lsls	r6, r0, #24
 8003dc2:	d501      	bpl.n	8003dc8 <_printf_i+0xbc>
 8003dc4:	681d      	ldr	r5, [r3, #0]
 8003dc6:	e003      	b.n	8003dd0 <_printf_i+0xc4>
 8003dc8:	0645      	lsls	r5, r0, #25
 8003dca:	d5fb      	bpl.n	8003dc4 <_printf_i+0xb8>
 8003dcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dd0:	2d00      	cmp	r5, #0
 8003dd2:	da03      	bge.n	8003ddc <_printf_i+0xd0>
 8003dd4:	232d      	movs	r3, #45	@ 0x2d
 8003dd6:	426d      	negs	r5, r5
 8003dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ddc:	230a      	movs	r3, #10
 8003dde:	4859      	ldr	r0, [pc, #356]	@ (8003f44 <_printf_i+0x238>)
 8003de0:	e011      	b.n	8003e06 <_printf_i+0xfa>
 8003de2:	6821      	ldr	r1, [r4, #0]
 8003de4:	6833      	ldr	r3, [r6, #0]
 8003de6:	0608      	lsls	r0, r1, #24
 8003de8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003dec:	d402      	bmi.n	8003df4 <_printf_i+0xe8>
 8003dee:	0649      	lsls	r1, r1, #25
 8003df0:	bf48      	it	mi
 8003df2:	b2ad      	uxthmi	r5, r5
 8003df4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003df6:	6033      	str	r3, [r6, #0]
 8003df8:	bf14      	ite	ne
 8003dfa:	230a      	movne	r3, #10
 8003dfc:	2308      	moveq	r3, #8
 8003dfe:	4851      	ldr	r0, [pc, #324]	@ (8003f44 <_printf_i+0x238>)
 8003e00:	2100      	movs	r1, #0
 8003e02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e06:	6866      	ldr	r6, [r4, #4]
 8003e08:	2e00      	cmp	r6, #0
 8003e0a:	bfa8      	it	ge
 8003e0c:	6821      	ldrge	r1, [r4, #0]
 8003e0e:	60a6      	str	r6, [r4, #8]
 8003e10:	bfa4      	itt	ge
 8003e12:	f021 0104 	bicge.w	r1, r1, #4
 8003e16:	6021      	strge	r1, [r4, #0]
 8003e18:	b90d      	cbnz	r5, 8003e1e <_printf_i+0x112>
 8003e1a:	2e00      	cmp	r6, #0
 8003e1c:	d04b      	beq.n	8003eb6 <_printf_i+0x1aa>
 8003e1e:	4616      	mov	r6, r2
 8003e20:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e24:	fb03 5711 	mls	r7, r3, r1, r5
 8003e28:	5dc7      	ldrb	r7, [r0, r7]
 8003e2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e2e:	462f      	mov	r7, r5
 8003e30:	42bb      	cmp	r3, r7
 8003e32:	460d      	mov	r5, r1
 8003e34:	d9f4      	bls.n	8003e20 <_printf_i+0x114>
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d10b      	bne.n	8003e52 <_printf_i+0x146>
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	07df      	lsls	r7, r3, #31
 8003e3e:	d508      	bpl.n	8003e52 <_printf_i+0x146>
 8003e40:	6923      	ldr	r3, [r4, #16]
 8003e42:	6861      	ldr	r1, [r4, #4]
 8003e44:	4299      	cmp	r1, r3
 8003e46:	bfde      	ittt	le
 8003e48:	2330      	movle	r3, #48	@ 0x30
 8003e4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e52:	1b92      	subs	r2, r2, r6
 8003e54:	6122      	str	r2, [r4, #16]
 8003e56:	464b      	mov	r3, r9
 8003e58:	4621      	mov	r1, r4
 8003e5a:	4640      	mov	r0, r8
 8003e5c:	f8cd a000 	str.w	sl, [sp]
 8003e60:	aa03      	add	r2, sp, #12
 8003e62:	f7ff fee1 	bl	8003c28 <_printf_common>
 8003e66:	3001      	adds	r0, #1
 8003e68:	d14a      	bne.n	8003f00 <_printf_i+0x1f4>
 8003e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6e:	b004      	add	sp, #16
 8003e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	f043 0320 	orr.w	r3, r3, #32
 8003e7a:	6023      	str	r3, [r4, #0]
 8003e7c:	2778      	movs	r7, #120	@ 0x78
 8003e7e:	4832      	ldr	r0, [pc, #200]	@ (8003f48 <_printf_i+0x23c>)
 8003e80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	6831      	ldr	r1, [r6, #0]
 8003e88:	061f      	lsls	r7, r3, #24
 8003e8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e8e:	d402      	bmi.n	8003e96 <_printf_i+0x18a>
 8003e90:	065f      	lsls	r7, r3, #25
 8003e92:	bf48      	it	mi
 8003e94:	b2ad      	uxthmi	r5, r5
 8003e96:	6031      	str	r1, [r6, #0]
 8003e98:	07d9      	lsls	r1, r3, #31
 8003e9a:	bf44      	itt	mi
 8003e9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003ea0:	6023      	strmi	r3, [r4, #0]
 8003ea2:	b11d      	cbz	r5, 8003eac <_printf_i+0x1a0>
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	e7ab      	b.n	8003e00 <_printf_i+0xf4>
 8003ea8:	4826      	ldr	r0, [pc, #152]	@ (8003f44 <_printf_i+0x238>)
 8003eaa:	e7e9      	b.n	8003e80 <_printf_i+0x174>
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	f023 0320 	bic.w	r3, r3, #32
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	e7f6      	b.n	8003ea4 <_printf_i+0x198>
 8003eb6:	4616      	mov	r6, r2
 8003eb8:	e7bd      	b.n	8003e36 <_printf_i+0x12a>
 8003eba:	6833      	ldr	r3, [r6, #0]
 8003ebc:	6825      	ldr	r5, [r4, #0]
 8003ebe:	1d18      	adds	r0, r3, #4
 8003ec0:	6961      	ldr	r1, [r4, #20]
 8003ec2:	6030      	str	r0, [r6, #0]
 8003ec4:	062e      	lsls	r6, r5, #24
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	d501      	bpl.n	8003ece <_printf_i+0x1c2>
 8003eca:	6019      	str	r1, [r3, #0]
 8003ecc:	e002      	b.n	8003ed4 <_printf_i+0x1c8>
 8003ece:	0668      	lsls	r0, r5, #25
 8003ed0:	d5fb      	bpl.n	8003eca <_printf_i+0x1be>
 8003ed2:	8019      	strh	r1, [r3, #0]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	4616      	mov	r6, r2
 8003ed8:	6123      	str	r3, [r4, #16]
 8003eda:	e7bc      	b.n	8003e56 <_printf_i+0x14a>
 8003edc:	6833      	ldr	r3, [r6, #0]
 8003ede:	2100      	movs	r1, #0
 8003ee0:	1d1a      	adds	r2, r3, #4
 8003ee2:	6032      	str	r2, [r6, #0]
 8003ee4:	681e      	ldr	r6, [r3, #0]
 8003ee6:	6862      	ldr	r2, [r4, #4]
 8003ee8:	4630      	mov	r0, r6
 8003eea:	f000 f859 	bl	8003fa0 <memchr>
 8003eee:	b108      	cbz	r0, 8003ef4 <_printf_i+0x1e8>
 8003ef0:	1b80      	subs	r0, r0, r6
 8003ef2:	6060      	str	r0, [r4, #4]
 8003ef4:	6863      	ldr	r3, [r4, #4]
 8003ef6:	6123      	str	r3, [r4, #16]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003efe:	e7aa      	b.n	8003e56 <_printf_i+0x14a>
 8003f00:	4632      	mov	r2, r6
 8003f02:	4649      	mov	r1, r9
 8003f04:	4640      	mov	r0, r8
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	47d0      	blx	sl
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	d0ad      	beq.n	8003e6a <_printf_i+0x15e>
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	079b      	lsls	r3, r3, #30
 8003f12:	d413      	bmi.n	8003f3c <_printf_i+0x230>
 8003f14:	68e0      	ldr	r0, [r4, #12]
 8003f16:	9b03      	ldr	r3, [sp, #12]
 8003f18:	4298      	cmp	r0, r3
 8003f1a:	bfb8      	it	lt
 8003f1c:	4618      	movlt	r0, r3
 8003f1e:	e7a6      	b.n	8003e6e <_printf_i+0x162>
 8003f20:	2301      	movs	r3, #1
 8003f22:	4632      	mov	r2, r6
 8003f24:	4649      	mov	r1, r9
 8003f26:	4640      	mov	r0, r8
 8003f28:	47d0      	blx	sl
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d09d      	beq.n	8003e6a <_printf_i+0x15e>
 8003f2e:	3501      	adds	r5, #1
 8003f30:	68e3      	ldr	r3, [r4, #12]
 8003f32:	9903      	ldr	r1, [sp, #12]
 8003f34:	1a5b      	subs	r3, r3, r1
 8003f36:	42ab      	cmp	r3, r5
 8003f38:	dcf2      	bgt.n	8003f20 <_printf_i+0x214>
 8003f3a:	e7eb      	b.n	8003f14 <_printf_i+0x208>
 8003f3c:	2500      	movs	r5, #0
 8003f3e:	f104 0619 	add.w	r6, r4, #25
 8003f42:	e7f5      	b.n	8003f30 <_printf_i+0x224>
 8003f44:	08004c53 	.word	0x08004c53
 8003f48:	08004c64 	.word	0x08004c64

08003f4c <memmove>:
 8003f4c:	4288      	cmp	r0, r1
 8003f4e:	b510      	push	{r4, lr}
 8003f50:	eb01 0402 	add.w	r4, r1, r2
 8003f54:	d902      	bls.n	8003f5c <memmove+0x10>
 8003f56:	4284      	cmp	r4, r0
 8003f58:	4623      	mov	r3, r4
 8003f5a:	d807      	bhi.n	8003f6c <memmove+0x20>
 8003f5c:	1e43      	subs	r3, r0, #1
 8003f5e:	42a1      	cmp	r1, r4
 8003f60:	d008      	beq.n	8003f74 <memmove+0x28>
 8003f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f6a:	e7f8      	b.n	8003f5e <memmove+0x12>
 8003f6c:	4601      	mov	r1, r0
 8003f6e:	4402      	add	r2, r0
 8003f70:	428a      	cmp	r2, r1
 8003f72:	d100      	bne.n	8003f76 <memmove+0x2a>
 8003f74:	bd10      	pop	{r4, pc}
 8003f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f7e:	e7f7      	b.n	8003f70 <memmove+0x24>

08003f80 <_sbrk_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	2300      	movs	r3, #0
 8003f84:	4d05      	ldr	r5, [pc, #20]	@ (8003f9c <_sbrk_r+0x1c>)
 8003f86:	4604      	mov	r4, r0
 8003f88:	4608      	mov	r0, r1
 8003f8a:	602b      	str	r3, [r5, #0]
 8003f8c:	f7fd f842 	bl	8001014 <_sbrk>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d102      	bne.n	8003f9a <_sbrk_r+0x1a>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	b103      	cbz	r3, 8003f9a <_sbrk_r+0x1a>
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	2000065c 	.word	0x2000065c

08003fa0 <memchr>:
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	b510      	push	{r4, lr}
 8003fa4:	b2c9      	uxtb	r1, r1
 8003fa6:	4402      	add	r2, r0
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	d101      	bne.n	8003fb2 <memchr+0x12>
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e003      	b.n	8003fba <memchr+0x1a>
 8003fb2:	7804      	ldrb	r4, [r0, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	428c      	cmp	r4, r1
 8003fb8:	d1f6      	bne.n	8003fa8 <memchr+0x8>
 8003fba:	bd10      	pop	{r4, pc}

08003fbc <memcpy>:
 8003fbc:	440a      	add	r2, r1
 8003fbe:	4291      	cmp	r1, r2
 8003fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fc4:	d100      	bne.n	8003fc8 <memcpy+0xc>
 8003fc6:	4770      	bx	lr
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fce:	4291      	cmp	r1, r2
 8003fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fd4:	d1f9      	bne.n	8003fca <memcpy+0xe>
 8003fd6:	bd10      	pop	{r4, pc}

08003fd8 <_realloc_r>:
 8003fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fdc:	4680      	mov	r8, r0
 8003fde:	4615      	mov	r5, r2
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	b921      	cbnz	r1, 8003fee <_realloc_r+0x16>
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fea:	f7ff bc39 	b.w	8003860 <_malloc_r>
 8003fee:	b92a      	cbnz	r2, 8003ffc <_realloc_r+0x24>
 8003ff0:	f7ff fbcc 	bl	800378c <_free_r>
 8003ff4:	2400      	movs	r4, #0
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ffc:	f000 f81a 	bl	8004034 <_malloc_usable_size_r>
 8004000:	4285      	cmp	r5, r0
 8004002:	4606      	mov	r6, r0
 8004004:	d802      	bhi.n	800400c <_realloc_r+0x34>
 8004006:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800400a:	d8f4      	bhi.n	8003ff6 <_realloc_r+0x1e>
 800400c:	4629      	mov	r1, r5
 800400e:	4640      	mov	r0, r8
 8004010:	f7ff fc26 	bl	8003860 <_malloc_r>
 8004014:	4607      	mov	r7, r0
 8004016:	2800      	cmp	r0, #0
 8004018:	d0ec      	beq.n	8003ff4 <_realloc_r+0x1c>
 800401a:	42b5      	cmp	r5, r6
 800401c:	462a      	mov	r2, r5
 800401e:	4621      	mov	r1, r4
 8004020:	bf28      	it	cs
 8004022:	4632      	movcs	r2, r6
 8004024:	f7ff ffca 	bl	8003fbc <memcpy>
 8004028:	4621      	mov	r1, r4
 800402a:	4640      	mov	r0, r8
 800402c:	f7ff fbae 	bl	800378c <_free_r>
 8004030:	463c      	mov	r4, r7
 8004032:	e7e0      	b.n	8003ff6 <_realloc_r+0x1e>

08004034 <_malloc_usable_size_r>:
 8004034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004038:	1f18      	subs	r0, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	bfbc      	itt	lt
 800403e:	580b      	ldrlt	r3, [r1, r0]
 8004040:	18c0      	addlt	r0, r0, r3
 8004042:	4770      	bx	lr

08004044 <_init>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	bf00      	nop
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr

08004050 <_fini>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr
